// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fcc.proto

package fcc_serv

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SaveMode int32

const (
	SaveMode_UNKNOWN SaveMode = 0
	SaveMode_ADD     SaveMode = 1
	SaveMode_UPDATE  SaveMode = 2
)

var SaveMode_name = map[int32]string{
	0: "UNKNOWN",
	1: "ADD",
	2: "UPDATE",
}

var SaveMode_value = map[string]int32{
	"UNKNOWN": 0,
	"ADD":     1,
	"UPDATE":  2,
}

func (x SaveMode) String() string {
	return proto.EnumName(SaveMode_name, int32(x))
}

func (SaveMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_690ecd8b3e17edf8, []int{0}
}

type BaseRet struct {
	Code int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *BaseRet) Reset()         { *m = BaseRet{} }
func (m *BaseRet) String() string { return proto.CompactTextString(m) }
func (*BaseRet) ProtoMessage()    {}
func (*BaseRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_690ecd8b3e17edf8, []int{0}
}
func (m *BaseRet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseRet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseRet.Merge(m, src)
}
func (m *BaseRet) XXX_Size() int {
	return m.Size()
}
func (m *BaseRet) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseRet.DiscardUnknown(m)
}

var xxx_messageInfo_BaseRet proto.InternalMessageInfo

func (m *BaseRet) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *BaseRet) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// swagger:model
type FetchProjectsRequest struct {
	Limit  int64             `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset int64             `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Filter map[string]string `protobuf:"bytes,3,rep,name=filter,proto3" json:"filter,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *FetchProjectsRequest) Reset()         { *m = FetchProjectsRequest{} }
func (m *FetchProjectsRequest) String() string { return proto.CompactTextString(m) }
func (*FetchProjectsRequest) ProtoMessage()    {}
func (*FetchProjectsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_690ecd8b3e17edf8, []int{1}
}
func (m *FetchProjectsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchProjectsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchProjectsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchProjectsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchProjectsRequest.Merge(m, src)
}
func (m *FetchProjectsRequest) XXX_Size() int {
	return m.Size()
}
func (m *FetchProjectsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchProjectsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchProjectsRequest proto.InternalMessageInfo

func (m *FetchProjectsRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *FetchProjectsRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *FetchProjectsRequest) GetFilter() map[string]string {
	if m != nil {
		return m.Filter
	}
	return nil
}

type FetchProjectsRet struct {
	Total int64      `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*Project `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (m *FetchProjectsRet) Reset()         { *m = FetchProjectsRet{} }
func (m *FetchProjectsRet) String() string { return proto.CompactTextString(m) }
func (*FetchProjectsRet) ProtoMessage()    {}
func (*FetchProjectsRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_690ecd8b3e17edf8, []int{2}
}
func (m *FetchProjectsRet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchProjectsRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchProjectsRet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchProjectsRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchProjectsRet.Merge(m, src)
}
func (m *FetchProjectsRet) XXX_Size() int {
	return m.Size()
}
func (m *FetchProjectsRet) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchProjectsRet.DiscardUnknown(m)
}

var xxx_messageInfo_FetchProjectsRet proto.InternalMessageInfo

func (m *FetchProjectsRet) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *FetchProjectsRet) GetList() []*Project {
	if m != nil {
		return m.List
	}
	return nil
}

type Project struct {
	ProjectKey  string `protobuf:"bytes,1,opt,name=project_key,json=projectKey,proto3" json:"project_key,omitempty"`
	ProjectName string `protobuf:"bytes,2,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Status      int64  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	OpId        string `protobuf:"bytes,97,opt,name=op_id,json=opId,proto3" json:"op_id,omitempty"`
	OpName      string `protobuf:"bytes,98,opt,name=op_name,json=opName,proto3" json:"op_name,omitempty"`
	CreateTime  int64  `protobuf:"varint,99,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime  int64  `protobuf:"varint,100,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (m *Project) Reset()         { *m = Project{} }
func (m *Project) String() string { return proto.CompactTextString(m) }
func (*Project) ProtoMessage()    {}
func (*Project) Descriptor() ([]byte, []int) {
	return fileDescriptor_690ecd8b3e17edf8, []int{3}
}
func (m *Project) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Project) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Project.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Project) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Project.Merge(m, src)
}
func (m *Project) XXX_Size() int {
	return m.Size()
}
func (m *Project) XXX_DiscardUnknown() {
	xxx_messageInfo_Project.DiscardUnknown(m)
}

var xxx_messageInfo_Project proto.InternalMessageInfo

func (m *Project) GetProjectKey() string {
	if m != nil {
		return m.ProjectKey
	}
	return ""
}

func (m *Project) GetProjectName() string {
	if m != nil {
		return m.ProjectName
	}
	return ""
}

func (m *Project) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Project) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Project) GetOpId() string {
	if m != nil {
		return m.OpId
	}
	return ""
}

func (m *Project) GetOpName() string {
	if m != nil {
		return m.OpName
	}
	return ""
}

func (m *Project) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *Project) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

// swagger:model
type FetchProjectsResponse struct {
	BaseRet *BaseRet          `protobuf:"bytes,1,opt,name=base_ret,json=baseRet,proto3" json:"base_ret,omitempty"`
	Data    *FetchProjectsRet `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *FetchProjectsResponse) Reset()         { *m = FetchProjectsResponse{} }
func (m *FetchProjectsResponse) String() string { return proto.CompactTextString(m) }
func (*FetchProjectsResponse) ProtoMessage()    {}
func (*FetchProjectsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_690ecd8b3e17edf8, []int{4}
}
func (m *FetchProjectsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchProjectsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchProjectsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchProjectsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchProjectsResponse.Merge(m, src)
}
func (m *FetchProjectsResponse) XXX_Size() int {
	return m.Size()
}
func (m *FetchProjectsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchProjectsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FetchProjectsResponse proto.InternalMessageInfo

func (m *FetchProjectsResponse) GetBaseRet() *BaseRet {
	if m != nil {
		return m.BaseRet
	}
	return nil
}

func (m *FetchProjectsResponse) GetData() *FetchProjectsRet {
	if m != nil {
		return m.Data
	}
	return nil
}

// swagger:model
type FetchGroupsRequest struct {
	Limit      int64             `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset     int64             `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	ProjectKey string            `protobuf:"bytes,3,opt,name=project_key,json=projectKey,proto3" json:"project_key,omitempty"`
	Filter     map[string]string `protobuf:"bytes,4,rep,name=filter,proto3" json:"filter,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *FetchGroupsRequest) Reset()         { *m = FetchGroupsRequest{} }
func (m *FetchGroupsRequest) String() string { return proto.CompactTextString(m) }
func (*FetchGroupsRequest) ProtoMessage()    {}
func (*FetchGroupsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_690ecd8b3e17edf8, []int{5}
}
func (m *FetchGroupsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchGroupsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchGroupsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchGroupsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchGroupsRequest.Merge(m, src)
}
func (m *FetchGroupsRequest) XXX_Size() int {
	return m.Size()
}
func (m *FetchGroupsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchGroupsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchGroupsRequest proto.InternalMessageInfo

func (m *FetchGroupsRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *FetchGroupsRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *FetchGroupsRequest) GetProjectKey() string {
	if m != nil {
		return m.ProjectKey
	}
	return ""
}

func (m *FetchGroupsRequest) GetFilter() map[string]string {
	if m != nil {
		return m.Filter
	}
	return nil
}

type FetchGroupsRet struct {
	Total int64    `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*Group `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (m *FetchGroupsRet) Reset()         { *m = FetchGroupsRet{} }
func (m *FetchGroupsRet) String() string { return proto.CompactTextString(m) }
func (*FetchGroupsRet) ProtoMessage()    {}
func (*FetchGroupsRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_690ecd8b3e17edf8, []int{6}
}
func (m *FetchGroupsRet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchGroupsRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchGroupsRet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchGroupsRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchGroupsRet.Merge(m, src)
}
func (m *FetchGroupsRet) XXX_Size() int {
	return m.Size()
}
func (m *FetchGroupsRet) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchGroupsRet.DiscardUnknown(m)
}

var xxx_messageInfo_FetchGroupsRet proto.InternalMessageInfo

func (m *FetchGroupsRet) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *FetchGroupsRet) GetList() []*Group {
	if m != nil {
		return m.List
	}
	return nil
}

type Group struct {
	ProjectKey  string `protobuf:"bytes,1,opt,name=project_key,json=projectKey,proto3" json:"project_key,omitempty"`
	GroupKey    string `protobuf:"bytes,2,opt,name=group_key,json=groupKey,proto3" json:"group_key,omitempty"`
	GroupName   string `protobuf:"bytes,3,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Status      int64  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	OpId        string `protobuf:"bytes,97,opt,name=op_id,json=opId,proto3" json:"op_id,omitempty"`
	OpName      string `protobuf:"bytes,98,opt,name=op_name,json=opName,proto3" json:"op_name,omitempty"`
	CreateTime  int64  `protobuf:"varint,99,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime  int64  `protobuf:"varint,100,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (m *Group) Reset()         { *m = Group{} }
func (m *Group) String() string { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()    {}
func (*Group) Descriptor() ([]byte, []int) {
	return fileDescriptor_690ecd8b3e17edf8, []int{7}
}
func (m *Group) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Group) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Group.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Group) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Group.Merge(m, src)
}
func (m *Group) XXX_Size() int {
	return m.Size()
}
func (m *Group) XXX_DiscardUnknown() {
	xxx_messageInfo_Group.DiscardUnknown(m)
}

var xxx_messageInfo_Group proto.InternalMessageInfo

func (m *Group) GetProjectKey() string {
	if m != nil {
		return m.ProjectKey
	}
	return ""
}

func (m *Group) GetGroupKey() string {
	if m != nil {
		return m.GroupKey
	}
	return ""
}

func (m *Group) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *Group) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Group) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Group) GetOpId() string {
	if m != nil {
		return m.OpId
	}
	return ""
}

func (m *Group) GetOpName() string {
	if m != nil {
		return m.OpName
	}
	return ""
}

func (m *Group) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *Group) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

// swagger:model
type FetchGroupsResponse struct {
	BaseRet *BaseRet        `protobuf:"bytes,1,opt,name=base_ret,json=baseRet,proto3" json:"base_ret,omitempty"`
	Data    *FetchGroupsRet `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *FetchGroupsResponse) Reset()         { *m = FetchGroupsResponse{} }
func (m *FetchGroupsResponse) String() string { return proto.CompactTextString(m) }
func (*FetchGroupsResponse) ProtoMessage()    {}
func (*FetchGroupsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_690ecd8b3e17edf8, []int{8}
}
func (m *FetchGroupsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchGroupsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchGroupsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchGroupsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchGroupsResponse.Merge(m, src)
}
func (m *FetchGroupsResponse) XXX_Size() int {
	return m.Size()
}
func (m *FetchGroupsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchGroupsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FetchGroupsResponse proto.InternalMessageInfo

func (m *FetchGroupsResponse) GetBaseRet() *BaseRet {
	if m != nil {
		return m.BaseRet
	}
	return nil
}

func (m *FetchGroupsResponse) GetData() *FetchGroupsRet {
	if m != nil {
		return m.Data
	}
	return nil
}

// swagger:model
type FetchConfigsRequest struct {
	Limit      int64             `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset     int64             `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	ProjectKey string            `protobuf:"bytes,3,opt,name=project_key,json=projectKey,proto3" json:"project_key,omitempty"`
	GroupKey   string            `protobuf:"bytes,4,opt,name=group_key,json=groupKey,proto3" json:"group_key,omitempty"`
	Filter     map[string]string `protobuf:"bytes,5,rep,name=filter,proto3" json:"filter,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *FetchConfigsRequest) Reset()         { *m = FetchConfigsRequest{} }
func (m *FetchConfigsRequest) String() string { return proto.CompactTextString(m) }
func (*FetchConfigsRequest) ProtoMessage()    {}
func (*FetchConfigsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_690ecd8b3e17edf8, []int{9}
}
func (m *FetchConfigsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchConfigsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchConfigsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchConfigsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchConfigsRequest.Merge(m, src)
}
func (m *FetchConfigsRequest) XXX_Size() int {
	return m.Size()
}
func (m *FetchConfigsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchConfigsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchConfigsRequest proto.InternalMessageInfo

func (m *FetchConfigsRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *FetchConfigsRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *FetchConfigsRequest) GetProjectKey() string {
	if m != nil {
		return m.ProjectKey
	}
	return ""
}

func (m *FetchConfigsRequest) GetGroupKey() string {
	if m != nil {
		return m.GroupKey
	}
	return ""
}

func (m *FetchConfigsRequest) GetFilter() map[string]string {
	if m != nil {
		return m.Filter
	}
	return nil
}

type FetchConfigsRet struct {
	Total int64     `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*Config `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (m *FetchConfigsRet) Reset()         { *m = FetchConfigsRet{} }
func (m *FetchConfigsRet) String() string { return proto.CompactTextString(m) }
func (*FetchConfigsRet) ProtoMessage()    {}
func (*FetchConfigsRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_690ecd8b3e17edf8, []int{10}
}
func (m *FetchConfigsRet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchConfigsRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchConfigsRet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchConfigsRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchConfigsRet.Merge(m, src)
}
func (m *FetchConfigsRet) XXX_Size() int {
	return m.Size()
}
func (m *FetchConfigsRet) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchConfigsRet.DiscardUnknown(m)
}

var xxx_messageInfo_FetchConfigsRet proto.InternalMessageInfo

func (m *FetchConfigsRet) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *FetchConfigsRet) GetList() []*Config {
	if m != nil {
		return m.List
	}
	return nil
}

type Config struct {
	ProjectKey    string `protobuf:"bytes,1,opt,name=project_key,json=projectKey,proto3" json:"project_key,omitempty"`
	GroupKey      string `protobuf:"bytes,2,opt,name=group_key,json=groupKey,proto3" json:"group_key,omitempty"`
	ConfKey       string `protobuf:"bytes,3,opt,name=conf_key,json=confKey,proto3" json:"conf_key,omitempty"`
	Description   string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Value         string `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	PreValue      string `protobuf:"bytes,6,opt,name=pre_value,json=preValue,proto3" json:"pre_value,omitempty"`
	Status        int64  `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
	PublishStatus int64  `protobuf:"varint,8,opt,name=publish_status,json=publishStatus,proto3" json:"publish_status,omitempty"`
	OpId          string `protobuf:"bytes,97,opt,name=op_id,json=opId,proto3" json:"op_id,omitempty"`
	OpName        string `protobuf:"bytes,98,opt,name=op_name,json=opName,proto3" json:"op_name,omitempty"`
	CreateTime    int64  `protobuf:"varint,99,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime    int64  `protobuf:"varint,100,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_690ecd8b3e17edf8, []int{11}
}
func (m *Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return m.Size()
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetProjectKey() string {
	if m != nil {
		return m.ProjectKey
	}
	return ""
}

func (m *Config) GetGroupKey() string {
	if m != nil {
		return m.GroupKey
	}
	return ""
}

func (m *Config) GetConfKey() string {
	if m != nil {
		return m.ConfKey
	}
	return ""
}

func (m *Config) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Config) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Config) GetPreValue() string {
	if m != nil {
		return m.PreValue
	}
	return ""
}

func (m *Config) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Config) GetPublishStatus() int64 {
	if m != nil {
		return m.PublishStatus
	}
	return 0
}

func (m *Config) GetOpId() string {
	if m != nil {
		return m.OpId
	}
	return ""
}

func (m *Config) GetOpName() string {
	if m != nil {
		return m.OpName
	}
	return ""
}

func (m *Config) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *Config) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

// swagger:model
type FetchConfigsResponse struct {
	BaseRet *BaseRet         `protobuf:"bytes,1,opt,name=base_ret,json=baseRet,proto3" json:"base_ret,omitempty"`
	Data    *FetchConfigsRet `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *FetchConfigsResponse) Reset()         { *m = FetchConfigsResponse{} }
func (m *FetchConfigsResponse) String() string { return proto.CompactTextString(m) }
func (*FetchConfigsResponse) ProtoMessage()    {}
func (*FetchConfigsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_690ecd8b3e17edf8, []int{12}
}
func (m *FetchConfigsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchConfigsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchConfigsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchConfigsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchConfigsResponse.Merge(m, src)
}
func (m *FetchConfigsResponse) XXX_Size() int {
	return m.Size()
}
func (m *FetchConfigsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchConfigsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FetchConfigsResponse proto.InternalMessageInfo

func (m *FetchConfigsResponse) GetBaseRet() *BaseRet {
	if m != nil {
		return m.BaseRet
	}
	return nil
}

func (m *FetchConfigsResponse) GetData() *FetchConfigsRet {
	if m != nil {
		return m.Data
	}
	return nil
}

// swagger:model
type SaveProjectRequest struct {
	Project  *Project `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	SaveMode SaveMode `protobuf:"varint,2,opt,name=save_mode,json=saveMode,proto3,enum=fcc.serv.SaveMode" json:"save_mode,omitempty"`
}

func (m *SaveProjectRequest) Reset()         { *m = SaveProjectRequest{} }
func (m *SaveProjectRequest) String() string { return proto.CompactTextString(m) }
func (*SaveProjectRequest) ProtoMessage()    {}
func (*SaveProjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_690ecd8b3e17edf8, []int{13}
}
func (m *SaveProjectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveProjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveProjectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveProjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveProjectRequest.Merge(m, src)
}
func (m *SaveProjectRequest) XXX_Size() int {
	return m.Size()
}
func (m *SaveProjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveProjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SaveProjectRequest proto.InternalMessageInfo

func (m *SaveProjectRequest) GetProject() *Project {
	if m != nil {
		return m.Project
	}
	return nil
}

func (m *SaveProjectRequest) GetSaveMode() SaveMode {
	if m != nil {
		return m.SaveMode
	}
	return SaveMode_UNKNOWN
}

// swagger:model
type SaveProjectResponse struct {
	BaseRet *BaseRet `protobuf:"bytes,1,opt,name=base_ret,json=baseRet,proto3" json:"base_ret,omitempty"`
}

func (m *SaveProjectResponse) Reset()         { *m = SaveProjectResponse{} }
func (m *SaveProjectResponse) String() string { return proto.CompactTextString(m) }
func (*SaveProjectResponse) ProtoMessage()    {}
func (*SaveProjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_690ecd8b3e17edf8, []int{14}
}
func (m *SaveProjectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveProjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveProjectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveProjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveProjectResponse.Merge(m, src)
}
func (m *SaveProjectResponse) XXX_Size() int {
	return m.Size()
}
func (m *SaveProjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveProjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SaveProjectResponse proto.InternalMessageInfo

func (m *SaveProjectResponse) GetBaseRet() *BaseRet {
	if m != nil {
		return m.BaseRet
	}
	return nil
}

// swagger:model
type SaveGroupRequest struct {
	Group    *Group   `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	SaveMode SaveMode `protobuf:"varint,2,opt,name=save_mode,json=saveMode,proto3,enum=fcc.serv.SaveMode" json:"save_mode,omitempty"`
}

func (m *SaveGroupRequest) Reset()         { *m = SaveGroupRequest{} }
func (m *SaveGroupRequest) String() string { return proto.CompactTextString(m) }
func (*SaveGroupRequest) ProtoMessage()    {}
func (*SaveGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_690ecd8b3e17edf8, []int{15}
}
func (m *SaveGroupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveGroupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveGroupRequest.Merge(m, src)
}
func (m *SaveGroupRequest) XXX_Size() int {
	return m.Size()
}
func (m *SaveGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SaveGroupRequest proto.InternalMessageInfo

func (m *SaveGroupRequest) GetGroup() *Group {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *SaveGroupRequest) GetSaveMode() SaveMode {
	if m != nil {
		return m.SaveMode
	}
	return SaveMode_UNKNOWN
}

// swagger:model
type SaveGroupResponse struct {
	BaseRet *BaseRet `protobuf:"bytes,1,opt,name=base_ret,json=baseRet,proto3" json:"base_ret,omitempty"`
}

func (m *SaveGroupResponse) Reset()         { *m = SaveGroupResponse{} }
func (m *SaveGroupResponse) String() string { return proto.CompactTextString(m) }
func (*SaveGroupResponse) ProtoMessage()    {}
func (*SaveGroupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_690ecd8b3e17edf8, []int{16}
}
func (m *SaveGroupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveGroupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveGroupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveGroupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveGroupResponse.Merge(m, src)
}
func (m *SaveGroupResponse) XXX_Size() int {
	return m.Size()
}
func (m *SaveGroupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveGroupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SaveGroupResponse proto.InternalMessageInfo

func (m *SaveGroupResponse) GetBaseRet() *BaseRet {
	if m != nil {
		return m.BaseRet
	}
	return nil
}

// swagger:model
type SaveConfigRequest struct {
	Config   *Config  `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	SaveMode SaveMode `protobuf:"varint,2,opt,name=save_mode,json=saveMode,proto3,enum=fcc.serv.SaveMode" json:"save_mode,omitempty"`
}

func (m *SaveConfigRequest) Reset()         { *m = SaveConfigRequest{} }
func (m *SaveConfigRequest) String() string { return proto.CompactTextString(m) }
func (*SaveConfigRequest) ProtoMessage()    {}
func (*SaveConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_690ecd8b3e17edf8, []int{17}
}
func (m *SaveConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveConfigRequest.Merge(m, src)
}
func (m *SaveConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *SaveConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SaveConfigRequest proto.InternalMessageInfo

func (m *SaveConfigRequest) GetConfig() *Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *SaveConfigRequest) GetSaveMode() SaveMode {
	if m != nil {
		return m.SaveMode
	}
	return SaveMode_UNKNOWN
}

// swagger:model
type SaveConfigResponse struct {
	BaseRet *BaseRet `protobuf:"bytes,1,opt,name=base_ret,json=baseRet,proto3" json:"base_ret,omitempty"`
}

func (m *SaveConfigResponse) Reset()         { *m = SaveConfigResponse{} }
func (m *SaveConfigResponse) String() string { return proto.CompactTextString(m) }
func (*SaveConfigResponse) ProtoMessage()    {}
func (*SaveConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_690ecd8b3e17edf8, []int{18}
}
func (m *SaveConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveConfigResponse.Merge(m, src)
}
func (m *SaveConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *SaveConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SaveConfigResponse proto.InternalMessageInfo

func (m *SaveConfigResponse) GetBaseRet() *BaseRet {
	if m != nil {
		return m.BaseRet
	}
	return nil
}

// swagger:model
type PrePublishRequest struct {
	ProjectKey string `protobuf:"bytes,1,opt,name=project_key,json=projectKey,proto3" json:"project_key,omitempty"`
	GroupKey   string `protobuf:"bytes,2,opt,name=group_key,json=groupKey,proto3" json:"group_key,omitempty"`
	ConfKey    string `protobuf:"bytes,3,opt,name=conf_key,json=confKey,proto3" json:"conf_key,omitempty"`
	PreValue   string `protobuf:"bytes,4,opt,name=pre_value,json=preValue,proto3" json:"pre_value,omitempty"`
	OpId       string `protobuf:"bytes,5,opt,name=op_id,json=opId,proto3" json:"op_id,omitempty"`
	OpName     string `protobuf:"bytes,6,opt,name=op_name,json=opName,proto3" json:"op_name,omitempty"`
}

func (m *PrePublishRequest) Reset()         { *m = PrePublishRequest{} }
func (m *PrePublishRequest) String() string { return proto.CompactTextString(m) }
func (*PrePublishRequest) ProtoMessage()    {}
func (*PrePublishRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_690ecd8b3e17edf8, []int{19}
}
func (m *PrePublishRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrePublishRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrePublishRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrePublishRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrePublishRequest.Merge(m, src)
}
func (m *PrePublishRequest) XXX_Size() int {
	return m.Size()
}
func (m *PrePublishRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrePublishRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrePublishRequest proto.InternalMessageInfo

func (m *PrePublishRequest) GetProjectKey() string {
	if m != nil {
		return m.ProjectKey
	}
	return ""
}

func (m *PrePublishRequest) GetGroupKey() string {
	if m != nil {
		return m.GroupKey
	}
	return ""
}

func (m *PrePublishRequest) GetConfKey() string {
	if m != nil {
		return m.ConfKey
	}
	return ""
}

func (m *PrePublishRequest) GetPreValue() string {
	if m != nil {
		return m.PreValue
	}
	return ""
}

func (m *PrePublishRequest) GetOpId() string {
	if m != nil {
		return m.OpId
	}
	return ""
}

func (m *PrePublishRequest) GetOpName() string {
	if m != nil {
		return m.OpName
	}
	return ""
}

// swagger:model
type PrePublishResponse struct {
	BaseRet *BaseRet `protobuf:"bytes,1,opt,name=base_ret,json=baseRet,proto3" json:"base_ret,omitempty"`
}

func (m *PrePublishResponse) Reset()         { *m = PrePublishResponse{} }
func (m *PrePublishResponse) String() string { return proto.CompactTextString(m) }
func (*PrePublishResponse) ProtoMessage()    {}
func (*PrePublishResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_690ecd8b3e17edf8, []int{20}
}
func (m *PrePublishResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrePublishResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrePublishResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrePublishResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrePublishResponse.Merge(m, src)
}
func (m *PrePublishResponse) XXX_Size() int {
	return m.Size()
}
func (m *PrePublishResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PrePublishResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PrePublishResponse proto.InternalMessageInfo

func (m *PrePublishResponse) GetBaseRet() *BaseRet {
	if m != nil {
		return m.BaseRet
	}
	return nil
}

// swagger:model
type PublishRequest struct {
	ProjectKey string `protobuf:"bytes,1,opt,name=project_key,json=projectKey,proto3" json:"project_key,omitempty"`
	GroupKey   string `protobuf:"bytes,2,opt,name=group_key,json=groupKey,proto3" json:"group_key,omitempty"`
	ConfKey    string `protobuf:"bytes,3,opt,name=conf_key,json=confKey,proto3" json:"conf_key,omitempty"`
	OpId       string `protobuf:"bytes,4,opt,name=op_id,json=opId,proto3" json:"op_id,omitempty"`
	OpName     string `protobuf:"bytes,5,opt,name=op_name,json=opName,proto3" json:"op_name,omitempty"`
}

func (m *PublishRequest) Reset()         { *m = PublishRequest{} }
func (m *PublishRequest) String() string { return proto.CompactTextString(m) }
func (*PublishRequest) ProtoMessage()    {}
func (*PublishRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_690ecd8b3e17edf8, []int{21}
}
func (m *PublishRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublishRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublishRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublishRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishRequest.Merge(m, src)
}
func (m *PublishRequest) XXX_Size() int {
	return m.Size()
}
func (m *PublishRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublishRequest proto.InternalMessageInfo

func (m *PublishRequest) GetProjectKey() string {
	if m != nil {
		return m.ProjectKey
	}
	return ""
}

func (m *PublishRequest) GetGroupKey() string {
	if m != nil {
		return m.GroupKey
	}
	return ""
}

func (m *PublishRequest) GetConfKey() string {
	if m != nil {
		return m.ConfKey
	}
	return ""
}

func (m *PublishRequest) GetOpId() string {
	if m != nil {
		return m.OpId
	}
	return ""
}

func (m *PublishRequest) GetOpName() string {
	if m != nil {
		return m.OpName
	}
	return ""
}

// swagger:model
type PublishResponse struct {
	BaseRet *BaseRet `protobuf:"bytes,1,opt,name=base_ret,json=baseRet,proto3" json:"base_ret,omitempty"`
}

func (m *PublishResponse) Reset()         { *m = PublishResponse{} }
func (m *PublishResponse) String() string { return proto.CompactTextString(m) }
func (*PublishResponse) ProtoMessage()    {}
func (*PublishResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_690ecd8b3e17edf8, []int{22}
}
func (m *PublishResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublishResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublishResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublishResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishResponse.Merge(m, src)
}
func (m *PublishResponse) XXX_Size() int {
	return m.Size()
}
func (m *PublishResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PublishResponse proto.InternalMessageInfo

func (m *PublishResponse) GetBaseRet() *BaseRet {
	if m != nil {
		return m.BaseRet
	}
	return nil
}

// swagger:model
type FetchConfigRequest struct {
	ProjectKey string `protobuf:"bytes,1,opt,name=project_key,json=projectKey,proto3" json:"project_key,omitempty"`
	GroupKey   string `protobuf:"bytes,2,opt,name=group_key,json=groupKey,proto3" json:"group_key,omitempty"`
	ConfKey    string `protobuf:"bytes,3,opt,name=conf_key,json=confKey,proto3" json:"conf_key,omitempty"`
}

func (m *FetchConfigRequest) Reset()         { *m = FetchConfigRequest{} }
func (m *FetchConfigRequest) String() string { return proto.CompactTextString(m) }
func (*FetchConfigRequest) ProtoMessage()    {}
func (*FetchConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_690ecd8b3e17edf8, []int{23}
}
func (m *FetchConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchConfigRequest.Merge(m, src)
}
func (m *FetchConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *FetchConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchConfigRequest proto.InternalMessageInfo

func (m *FetchConfigRequest) GetProjectKey() string {
	if m != nil {
		return m.ProjectKey
	}
	return ""
}

func (m *FetchConfigRequest) GetGroupKey() string {
	if m != nil {
		return m.GroupKey
	}
	return ""
}

func (m *FetchConfigRequest) GetConfKey() string {
	if m != nil {
		return m.ConfKey
	}
	return ""
}

// swagger:model
type FetchConfigResponse struct {
	BaseRet *BaseRet `protobuf:"bytes,1,opt,name=base_ret,json=baseRet,proto3" json:"base_ret,omitempty"`
	Data    *Config  `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *FetchConfigResponse) Reset()         { *m = FetchConfigResponse{} }
func (m *FetchConfigResponse) String() string { return proto.CompactTextString(m) }
func (*FetchConfigResponse) ProtoMessage()    {}
func (*FetchConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_690ecd8b3e17edf8, []int{24}
}
func (m *FetchConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchConfigResponse.Merge(m, src)
}
func (m *FetchConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *FetchConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FetchConfigResponse proto.InternalMessageInfo

func (m *FetchConfigResponse) GetBaseRet() *BaseRet {
	if m != nil {
		return m.BaseRet
	}
	return nil
}

func (m *FetchConfigResponse) GetData() *Config {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterEnum("fcc.serv.SaveMode", SaveMode_name, SaveMode_value)
	proto.RegisterType((*BaseRet)(nil), "fcc.serv.BaseRet")
	proto.RegisterType((*FetchProjectsRequest)(nil), "fcc.serv.FetchProjectsRequest")
	proto.RegisterMapType((map[string]string)(nil), "fcc.serv.FetchProjectsRequest.FilterEntry")
	proto.RegisterType((*FetchProjectsRet)(nil), "fcc.serv.FetchProjectsRet")
	proto.RegisterType((*Project)(nil), "fcc.serv.Project")
	proto.RegisterType((*FetchProjectsResponse)(nil), "fcc.serv.FetchProjectsResponse")
	proto.RegisterType((*FetchGroupsRequest)(nil), "fcc.serv.FetchGroupsRequest")
	proto.RegisterMapType((map[string]string)(nil), "fcc.serv.FetchGroupsRequest.FilterEntry")
	proto.RegisterType((*FetchGroupsRet)(nil), "fcc.serv.FetchGroupsRet")
	proto.RegisterType((*Group)(nil), "fcc.serv.Group")
	proto.RegisterType((*FetchGroupsResponse)(nil), "fcc.serv.FetchGroupsResponse")
	proto.RegisterType((*FetchConfigsRequest)(nil), "fcc.serv.FetchConfigsRequest")
	proto.RegisterMapType((map[string]string)(nil), "fcc.serv.FetchConfigsRequest.FilterEntry")
	proto.RegisterType((*FetchConfigsRet)(nil), "fcc.serv.FetchConfigsRet")
	proto.RegisterType((*Config)(nil), "fcc.serv.Config")
	proto.RegisterType((*FetchConfigsResponse)(nil), "fcc.serv.FetchConfigsResponse")
	proto.RegisterType((*SaveProjectRequest)(nil), "fcc.serv.SaveProjectRequest")
	proto.RegisterType((*SaveProjectResponse)(nil), "fcc.serv.SaveProjectResponse")
	proto.RegisterType((*SaveGroupRequest)(nil), "fcc.serv.SaveGroupRequest")
	proto.RegisterType((*SaveGroupResponse)(nil), "fcc.serv.SaveGroupResponse")
	proto.RegisterType((*SaveConfigRequest)(nil), "fcc.serv.SaveConfigRequest")
	proto.RegisterType((*SaveConfigResponse)(nil), "fcc.serv.SaveConfigResponse")
	proto.RegisterType((*PrePublishRequest)(nil), "fcc.serv.PrePublishRequest")
	proto.RegisterType((*PrePublishResponse)(nil), "fcc.serv.PrePublishResponse")
	proto.RegisterType((*PublishRequest)(nil), "fcc.serv.PublishRequest")
	proto.RegisterType((*PublishResponse)(nil), "fcc.serv.PublishResponse")
	proto.RegisterType((*FetchConfigRequest)(nil), "fcc.serv.FetchConfigRequest")
	proto.RegisterType((*FetchConfigResponse)(nil), "fcc.serv.FetchConfigResponse")
}

func init() { proto.RegisterFile("fcc.proto", fileDescriptor_690ecd8b3e17edf8) }

var fileDescriptor_690ecd8b3e17edf8 = []byte{
	// 1086 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x16, 0x2d, 0x52, 0x94, 0x46, 0x89, 0x2d, 0xaf, 0xd3, 0x56, 0x56, 0x6c, 0xd9, 0x65, 0x63,
	0x40, 0x4d, 0x5d, 0x05, 0x70, 0x2f, 0x6d, 0x2f, 0x8d, 0x1d, 0xc7, 0x45, 0xe0, 0xc6, 0x36, 0xe8,
	0xa4, 0x3d, 0x0a, 0x14, 0xb5, 0x72, 0x98, 0x4a, 0x22, 0x43, 0xae, 0x04, 0xf8, 0x25, 0x8a, 0xde,
	0xfa, 0x28, 0x3d, 0xf4, 0xd8, 0x4b, 0x8f, 0x39, 0xf6, 0x18, 0xd8, 0xe8, 0x33, 0xf4, 0xd8, 0x62,
	0x7f, 0x48, 0xed, 0x52, 0xa4, 0x83, 0x28, 0x71, 0x72, 0xdb, 0x9d, 0x99, 0x9d, 0xf9, 0x66, 0xe7,
	0x9b, 0xe1, 0x4a, 0x50, 0xe9, 0xbb, 0x6e, 0x3b, 0x08, 0x7d, 0xe2, 0xa3, 0x32, 0x5d, 0x46, 0x38,
	0x9c, 0x58, 0xf7, 0xc0, 0xdc, 0x73, 0x22, 0x6c, 0x63, 0x82, 0x10, 0xe8, 0xae, 0xdf, 0xc3, 0x75,
	0x6d, 0x53, 0x6b, 0x15, 0x6d, 0xb6, 0x46, 0x35, 0x28, 0x0e, 0xa3, 0xb3, 0xfa, 0xc2, 0xa6, 0xd6,
	0xaa, 0xd8, 0x74, 0x69, 0xfd, 0xa9, 0xc1, 0xad, 0x03, 0x4c, 0xdc, 0x67, 0x27, 0xa1, 0xff, 0x1c,
	0xbb, 0x24, 0xb2, 0xf1, 0x8b, 0x31, 0x8e, 0x08, 0xba, 0x05, 0xc6, 0xc0, 0x1b, 0x7a, 0x44, 0x9c,
	0xe7, 0x1b, 0xf4, 0x31, 0x94, 0xfc, 0x7e, 0x3f, 0xc2, 0x84, 0xf9, 0x28, 0xda, 0x62, 0x87, 0xf6,
	0xa0, 0xd4, 0xf7, 0x06, 0x04, 0x87, 0xf5, 0xe2, 0x66, 0xb1, 0x55, 0xdd, 0xb9, 0xdb, 0x8e, 0x21,
	0xb5, 0xb3, 0xbc, 0xb7, 0x0f, 0x98, 0xf1, 0xc3, 0x11, 0x09, 0xcf, 0x6d, 0x71, 0xb2, 0xf1, 0x0d,
	0x54, 0x25, 0x31, 0xc5, 0xfa, 0x33, 0x3e, 0x67, 0xe1, 0x2b, 0x36, 0x5d, 0x52, 0x48, 0x13, 0x67,
	0x30, 0xc6, 0x02, 0x3f, 0xdf, 0x7c, 0xbb, 0xf0, 0xb5, 0x66, 0x1d, 0x43, 0x2d, 0x15, 0x86, 0x25,
	0x40, 0x7c, 0xe2, 0x0c, 0xe2, 0x04, 0xd8, 0x06, 0x6d, 0x81, 0x3e, 0xf0, 0x22, 0x0a, 0x9f, 0xc2,
	0x5c, 0x9e, 0xc2, 0x14, 0x47, 0x6d, 0xa6, 0xb6, 0xfe, 0xd5, 0xc0, 0x14, 0x12, 0xb4, 0x01, 0xd5,
	0x80, 0x2f, 0x3b, 0x53, 0x40, 0x20, 0x44, 0x87, 0xf8, 0x1c, 0x7d, 0x0a, 0x37, 0x62, 0x83, 0x91,
	0x33, 0x8c, 0xe1, 0xc5, 0x87, 0x8e, 0x9c, 0x21, 0x46, 0x9b, 0x50, 0xed, 0xe1, 0xc8, 0x0d, 0xbd,
	0x80, 0x78, 0xfe, 0xa8, 0x5e, 0xe4, 0x16, 0x92, 0x88, 0xde, 0x6c, 0x44, 0x1c, 0x32, 0x8e, 0xea,
	0x3a, 0xbf, 0x59, 0xbe, 0x43, 0x2b, 0x60, 0xf8, 0x41, 0xc7, 0xeb, 0xd5, 0x1d, 0x76, 0x46, 0xf7,
	0x83, 0x47, 0x3d, 0xf4, 0x09, 0x98, 0x7e, 0xc0, 0x83, 0x75, 0x99, 0xb8, 0xe4, 0x07, 0x2c, 0xce,
	0x06, 0x54, 0xdd, 0x10, 0x3b, 0x04, 0x77, 0x88, 0x37, 0xc4, 0x75, 0x97, 0xb9, 0x02, 0x2e, 0x7a,
	0xe2, 0x71, 0x83, 0x71, 0xd0, 0x4b, 0x0c, 0x7a, 0xdc, 0x80, 0x8b, 0xa8, 0x81, 0x35, 0x86, 0x8f,
	0x52, 0x57, 0x19, 0x05, 0xfe, 0x28, 0xc2, 0x68, 0x1b, 0xca, 0x5d, 0x27, 0xc2, 0x9d, 0x10, 0x73,
	0x4e, 0x28, 0xb7, 0x27, 0x48, 0x67, 0x9b, 0x5d, 0xc1, 0xbe, 0x36, 0xe8, 0x3d, 0x87, 0x38, 0xec,
	0x2e, 0xaa, 0x3b, 0x8d, 0x5c, 0x3a, 0x10, 0x9b, 0xd9, 0x59, 0xaf, 0x34, 0x40, 0x4c, 0xf5, 0x7d,
	0xe8, 0x8f, 0x83, 0x39, 0x59, 0x98, 0xaa, 0x54, 0x71, 0xa6, 0x52, 0xf7, 0x13, 0x9a, 0xea, 0xac,
	0xfe, 0xad, 0x14, 0x2e, 0x25, 0xf8, 0xbb, 0x26, 0xe9, 0x21, 0x2c, 0x2a, 0x41, 0xf2, 0x28, 0xfa,
	0x99, 0x42, 0xd1, 0xa5, 0x29, 0x44, 0x76, 0x50, 0x10, 0xf4, 0x97, 0x05, 0x30, 0xd8, 0xfe, 0xf5,
	0xf4, 0xbc, 0x0d, 0x95, 0x33, 0x6a, 0xc9, 0xd4, 0x1c, 0x55, 0x99, 0x09, 0xa8, 0x72, 0x1d, 0x80,
	0x2b, 0x19, 0x99, 0xf8, 0x8d, 0x71, 0xf3, 0x2c, 0xde, 0xea, 0x57, 0xf1, 0xd6, 0xf8, 0xa0, 0xbc,
	0x7d, 0x01, 0x2b, 0xca, 0xed, 0xce, 0xc5, 0xda, 0x6d, 0x85, 0xb5, 0xf5, 0x1c, 0x76, 0xc4, 0x9c,
	0xfd, 0x4f, 0x13, 0x31, 0x1f, 0xf8, 0xa3, 0xbe, 0x77, 0x76, 0x5d, 0xa4, 0x55, 0xea, 0xa7, 0xa7,
	0xea, 0xb7, 0x9b, 0x30, 0xda, 0x60, 0x74, 0xf9, 0x3c, 0x85, 0x59, 0x85, 0xf6, 0xae, 0x29, 0xfd,
	0x18, 0x96, 0xd4, 0x28, 0x79, 0x9c, 0xbe, 0xa3, 0x70, 0xba, 0x36, 0x05, 0xc9, 0x4f, 0x0a, 0x52,
	0xff, 0xb3, 0x00, 0x25, 0x2e, 0x78, 0x4b, 0x56, 0xaf, 0x42, 0xd9, 0xf5, 0x47, 0x7d, 0xe9, 0x42,
	0x4d, 0xba, 0xa7, 0xaa, 0xd7, 0x33, 0x3a, 0x49, 0xd7, 0x90, 0xd2, 0xa5, 0xf1, 0x82, 0x10, 0x77,
	0xb8, 0xa6, 0xc4, 0xe3, 0x05, 0x21, 0xfe, 0x91, 0x29, 0xa7, 0x4d, 0x60, 0x2a, 0x4d, 0xb0, 0x05,
	0x8b, 0xc1, 0xb8, 0x3b, 0xf0, 0xa2, 0x67, 0x1d, 0xa1, 0x2f, 0x33, 0xfd, 0x4d, 0x21, 0x3d, 0xfd,
	0x30, 0xbd, 0x12, 0x89, 0x6f, 0x7e, 0x52, 0xb6, 0xb9, 0x9a, 0xe5, 0x4b, 0xa5, 0x59, 0x56, 0xf3,
	0x88, 0x17, 0x77, 0x4b, 0x08, 0xe8, 0xd4, 0x99, 0xe0, 0xf8, 0x3b, 0x2b, 0x7a, 0xe5, 0x0b, 0x30,
	0x45, 0x51, 0x67, 0x23, 0xc6, 0xa6, 0xb1, 0x05, 0xba, 0x07, 0x95, 0xc8, 0x99, 0xe0, 0xce, 0x90,
	0xbe, 0x6b, 0x68, 0xd8, 0xc5, 0x1d, 0x34, 0x35, 0xa7, 0xde, 0x1f, 0xfb, 0x3d, 0x6c, 0x97, 0x23,
	0xb1, 0xb2, 0x1e, 0xc0, 0x8a, 0x12, 0x73, 0x9e, 0x3c, 0xad, 0xe7, 0x50, 0xa3, 0x4e, 0xf8, 0xf4,
	0x15, 0xb0, 0xb7, 0xc0, 0x60, 0x64, 0x13, 0xc7, 0x67, 0x86, 0x34, 0xd7, 0xbe, 0x39, 0xe0, 0x5d,
	0x58, 0x96, 0x62, 0xcd, 0x05, 0x77, 0xc4, 0x5d, 0x88, 0xc6, 0x12, 0x78, 0x5b, 0x50, 0x72, 0x99,
	0x40, 0x38, 0x98, 0xed, 0x40, 0xa1, 0x7f, 0x73, 0xc8, 0x7b, 0xbc, 0xae, 0x71, 0xbc, 0xb9, 0x30,
	0xff, 0xae, 0xc1, 0xf2, 0x49, 0x88, 0x4f, 0x78, 0x57, 0xc4, 0xa0, 0xaf, 0x6d, 0x06, 0x28, 0xbd,
	0xac, 0xa7, 0x7a, 0x39, 0x69, 0x46, 0x23, 0xbb, 0x19, 0x4b, 0x72, 0x33, 0xd2, 0xec, 0x65, 0xe0,
	0x73, 0x65, 0xff, 0x9b, 0x06, 0x8b, 0xef, 0x2b, 0xf5, 0x24, 0x3b, 0x3d, 0x3b, 0x3b, 0x43, 0xc9,
	0xee, 0x3b, 0x58, 0x7a, 0xbb, 0xd4, 0x86, 0xe2, 0x55, 0xa7, 0xb2, 0xf1, 0xba, 0xb2, 0xb3, 0x3c,
	0xe5, 0x83, 0x3c, 0xe7, 0x5c, 0xbb, 0xa3, 0xcc, 0xb5, 0x8c, 0x6f, 0x15, 0xd5, 0xde, 0xdd, 0x86,
	0x72, 0xdc, 0x0c, 0xa8, 0x0a, 0xe6, 0xd3, 0xa3, 0xc3, 0xa3, 0xe3, 0x9f, 0x8e, 0x6a, 0x05, 0x64,
	0x42, 0x71, 0x77, 0x7f, 0xbf, 0xa6, 0x21, 0x80, 0xd2, 0xd3, 0x93, 0xfd, 0xdd, 0x27, 0x0f, 0x6b,
	0x0b, 0x3b, 0x7f, 0x18, 0x00, 0x07, 0xae, 0x7b, 0x8a, 0xc3, 0x89, 0xe7, 0x62, 0x64, 0xc3, 0x4d,
	0xe5, 0x1d, 0x8c, 0x9a, 0x57, 0xff, 0x5e, 0x6a, 0x6c, 0xe4, 0xea, 0x79, 0x8a, 0x56, 0x01, 0xfd,
	0x00, 0x55, 0xe9, 0x95, 0x82, 0xd6, 0xae, 0x7a, 0xda, 0x36, 0xd6, 0x73, 0xb4, 0x89, 0xb7, 0x63,
	0xb8, 0x21, 0x8f, 0x71, 0xb4, 0x7e, 0xe5, 0xbb, 0xa2, 0xd1, 0xcc, 0x53, 0xcb, 0xf0, 0xa4, 0x51,
	0x2c, 0xc3, 0x9b, 0xfd, 0x2a, 0xc8, 0xf0, 0x32, 0xe6, 0xb7, 0x55, 0x40, 0x07, 0x50, 0x49, 0xe6,
	0x24, 0x6a, 0xa8, 0xd6, 0xf2, 0xa0, 0x6e, 0xdc, 0xce, 0xd4, 0x25, 0x7e, 0x1e, 0x01, 0x4c, 0x87,
	0x17, 0x4a, 0x19, 0x2b, 0xa4, 0x6d, 0xac, 0x65, 0x2b, 0x65, 0x57, 0xd3, 0x49, 0x20, 0xbb, 0x9a,
	0x19, 0x6c, 0xb2, 0xab, 0xd9, 0xe1, 0x61, 0x15, 0xd0, 0x7d, 0x30, 0x63, 0x3f, 0xd2, 0x1b, 0x34,
	0xe5, 0x64, 0x35, 0x43, 0x33, 0x43, 0x06, 0x91, 0xd8, 0x5a, 0x66, 0x79, 0xf2, 0xc8, 0x90, 0x4e,
	0x6d, 0xaf, 0xfe, 0xd7, 0x45, 0x53, 0x7b, 0x79, 0xd1, 0xd4, 0x5e, 0x5d, 0x34, 0xb5, 0x5f, 0x2f,
	0x9b, 0x85, 0x97, 0x97, 0xcd, 0xc2, 0xdf, 0x97, 0xcd, 0x42, 0xb7, 0xc4, 0xfe, 0x80, 0xf8, 0xea,
	0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6e, 0xcb, 0x7b, 0xa9, 0x8d, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FccServiceClient is the client API for FccService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FccServiceClient interface {
	FetchProjects(ctx context.Context, in *FetchProjectsRequest, opts ...grpc.CallOption) (*FetchProjectsResponse, error)
	FetchGroups(ctx context.Context, in *FetchGroupsRequest, opts ...grpc.CallOption) (*FetchGroupsResponse, error)
	FetchConfigs(ctx context.Context, in *FetchConfigsRequest, opts ...grpc.CallOption) (*FetchConfigsResponse, error)
	SaveProject(ctx context.Context, in *SaveProjectRequest, opts ...grpc.CallOption) (*SaveProjectResponse, error)
	SaveGroup(ctx context.Context, in *SaveGroupRequest, opts ...grpc.CallOption) (*SaveGroupResponse, error)
	SaveConfig(ctx context.Context, in *SaveConfigRequest, opts ...grpc.CallOption) (*SaveConfigResponse, error)
	PrePublish(ctx context.Context, in *PrePublishRequest, opts ...grpc.CallOption) (*PrePublishResponse, error)
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	FetchConfig(ctx context.Context, in *FetchConfigRequest, opts ...grpc.CallOption) (*FetchConfigResponse, error)
}

type fccServiceClient struct {
	cc *grpc.ClientConn
}

func NewFccServiceClient(cc *grpc.ClientConn) FccServiceClient {
	return &fccServiceClient{cc}
}

func (c *fccServiceClient) FetchProjects(ctx context.Context, in *FetchProjectsRequest, opts ...grpc.CallOption) (*FetchProjectsResponse, error) {
	out := new(FetchProjectsResponse)
	err := c.cc.Invoke(ctx, "/fcc.serv.FccService/FetchProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fccServiceClient) FetchGroups(ctx context.Context, in *FetchGroupsRequest, opts ...grpc.CallOption) (*FetchGroupsResponse, error) {
	out := new(FetchGroupsResponse)
	err := c.cc.Invoke(ctx, "/fcc.serv.FccService/FetchGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fccServiceClient) FetchConfigs(ctx context.Context, in *FetchConfigsRequest, opts ...grpc.CallOption) (*FetchConfigsResponse, error) {
	out := new(FetchConfigsResponse)
	err := c.cc.Invoke(ctx, "/fcc.serv.FccService/FetchConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fccServiceClient) SaveProject(ctx context.Context, in *SaveProjectRequest, opts ...grpc.CallOption) (*SaveProjectResponse, error) {
	out := new(SaveProjectResponse)
	err := c.cc.Invoke(ctx, "/fcc.serv.FccService/SaveProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fccServiceClient) SaveGroup(ctx context.Context, in *SaveGroupRequest, opts ...grpc.CallOption) (*SaveGroupResponse, error) {
	out := new(SaveGroupResponse)
	err := c.cc.Invoke(ctx, "/fcc.serv.FccService/SaveGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fccServiceClient) SaveConfig(ctx context.Context, in *SaveConfigRequest, opts ...grpc.CallOption) (*SaveConfigResponse, error) {
	out := new(SaveConfigResponse)
	err := c.cc.Invoke(ctx, "/fcc.serv.FccService/SaveConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fccServiceClient) PrePublish(ctx context.Context, in *PrePublishRequest, opts ...grpc.CallOption) (*PrePublishResponse, error) {
	out := new(PrePublishResponse)
	err := c.cc.Invoke(ctx, "/fcc.serv.FccService/PrePublish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fccServiceClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, "/fcc.serv.FccService/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fccServiceClient) FetchConfig(ctx context.Context, in *FetchConfigRequest, opts ...grpc.CallOption) (*FetchConfigResponse, error) {
	out := new(FetchConfigResponse)
	err := c.cc.Invoke(ctx, "/fcc.serv.FccService/FetchConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FccServiceServer is the server API for FccService service.
type FccServiceServer interface {
	FetchProjects(context.Context, *FetchProjectsRequest) (*FetchProjectsResponse, error)
	FetchGroups(context.Context, *FetchGroupsRequest) (*FetchGroupsResponse, error)
	FetchConfigs(context.Context, *FetchConfigsRequest) (*FetchConfigsResponse, error)
	SaveProject(context.Context, *SaveProjectRequest) (*SaveProjectResponse, error)
	SaveGroup(context.Context, *SaveGroupRequest) (*SaveGroupResponse, error)
	SaveConfig(context.Context, *SaveConfigRequest) (*SaveConfigResponse, error)
	PrePublish(context.Context, *PrePublishRequest) (*PrePublishResponse, error)
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
	FetchConfig(context.Context, *FetchConfigRequest) (*FetchConfigResponse, error)
}

// UnimplementedFccServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFccServiceServer struct {
}

func (*UnimplementedFccServiceServer) FetchProjects(ctx context.Context, req *FetchProjectsRequest) (*FetchProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchProjects not implemented")
}
func (*UnimplementedFccServiceServer) FetchGroups(ctx context.Context, req *FetchGroupsRequest) (*FetchGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGroups not implemented")
}
func (*UnimplementedFccServiceServer) FetchConfigs(ctx context.Context, req *FetchConfigsRequest) (*FetchConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchConfigs not implemented")
}
func (*UnimplementedFccServiceServer) SaveProject(ctx context.Context, req *SaveProjectRequest) (*SaveProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveProject not implemented")
}
func (*UnimplementedFccServiceServer) SaveGroup(ctx context.Context, req *SaveGroupRequest) (*SaveGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveGroup not implemented")
}
func (*UnimplementedFccServiceServer) SaveConfig(ctx context.Context, req *SaveConfigRequest) (*SaveConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveConfig not implemented")
}
func (*UnimplementedFccServiceServer) PrePublish(ctx context.Context, req *PrePublishRequest) (*PrePublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrePublish not implemented")
}
func (*UnimplementedFccServiceServer) Publish(ctx context.Context, req *PublishRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (*UnimplementedFccServiceServer) FetchConfig(ctx context.Context, req *FetchConfigRequest) (*FetchConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchConfig not implemented")
}

func RegisterFccServiceServer(s *grpc.Server, srv FccServiceServer) {
	s.RegisterService(&_FccService_serviceDesc, srv)
}

func _FccService_FetchProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FccServiceServer).FetchProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fcc.serv.FccService/FetchProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FccServiceServer).FetchProjects(ctx, req.(*FetchProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FccService_FetchGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FccServiceServer).FetchGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fcc.serv.FccService/FetchGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FccServiceServer).FetchGroups(ctx, req.(*FetchGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FccService_FetchConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FccServiceServer).FetchConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fcc.serv.FccService/FetchConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FccServiceServer).FetchConfigs(ctx, req.(*FetchConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FccService_SaveProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FccServiceServer).SaveProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fcc.serv.FccService/SaveProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FccServiceServer).SaveProject(ctx, req.(*SaveProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FccService_SaveGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FccServiceServer).SaveGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fcc.serv.FccService/SaveGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FccServiceServer).SaveGroup(ctx, req.(*SaveGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FccService_SaveConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FccServiceServer).SaveConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fcc.serv.FccService/SaveConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FccServiceServer).SaveConfig(ctx, req.(*SaveConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FccService_PrePublish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrePublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FccServiceServer).PrePublish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fcc.serv.FccService/PrePublish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FccServiceServer).PrePublish(ctx, req.(*PrePublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FccService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FccServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fcc.serv.FccService/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FccServiceServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FccService_FetchConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FccServiceServer).FetchConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fcc.serv.FccService/FetchConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FccServiceServer).FetchConfig(ctx, req.(*FetchConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FccService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fcc.serv.FccService",
	HandlerType: (*FccServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchProjects",
			Handler:    _FccService_FetchProjects_Handler,
		},
		{
			MethodName: "FetchGroups",
			Handler:    _FccService_FetchGroups_Handler,
		},
		{
			MethodName: "FetchConfigs",
			Handler:    _FccService_FetchConfigs_Handler,
		},
		{
			MethodName: "SaveProject",
			Handler:    _FccService_SaveProject_Handler,
		},
		{
			MethodName: "SaveGroup",
			Handler:    _FccService_SaveGroup_Handler,
		},
		{
			MethodName: "SaveConfig",
			Handler:    _FccService_SaveConfig_Handler,
		},
		{
			MethodName: "PrePublish",
			Handler:    _FccService_PrePublish_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _FccService_Publish_Handler,
		},
		{
			MethodName: "FetchConfig",
			Handler:    _FccService_FetchConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fcc.proto",
}

func (m *BaseRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseRet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseRet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintFcc(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FetchProjectsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchProjectsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchProjectsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Filter) > 0 {
		for k := range m.Filter {
			v := m.Filter[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintFcc(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintFcc(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintFcc(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Offset != 0 {
		i = encodeVarintFcc(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Limit != 0 {
		i = encodeVarintFcc(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FetchProjectsRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchProjectsRet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchProjectsRet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFcc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Total != 0 {
		i = encodeVarintFcc(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Project) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Project) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Project) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdateTime != 0 {
		i = encodeVarintFcc(dAtA, i, uint64(m.UpdateTime))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.CreateTime != 0 {
		i = encodeVarintFcc(dAtA, i, uint64(m.CreateTime))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x98
	}
	if len(m.OpName) > 0 {
		i -= len(m.OpName)
		copy(dAtA[i:], m.OpName)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.OpName)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	if len(m.OpId) > 0 {
		i -= len(m.OpId)
		copy(dAtA[i:], m.OpId)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.OpId)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x8a
	}
	if m.Status != 0 {
		i = encodeVarintFcc(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProjectName) > 0 {
		i -= len(m.ProjectName)
		copy(dAtA[i:], m.ProjectName)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.ProjectName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProjectKey) > 0 {
		i -= len(m.ProjectKey)
		copy(dAtA[i:], m.ProjectKey)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.ProjectKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FetchProjectsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchProjectsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchProjectsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFcc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.BaseRet != nil {
		{
			size, err := m.BaseRet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFcc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FetchGroupsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchGroupsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchGroupsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Filter) > 0 {
		for k := range m.Filter {
			v := m.Filter[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintFcc(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintFcc(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintFcc(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ProjectKey) > 0 {
		i -= len(m.ProjectKey)
		copy(dAtA[i:], m.ProjectKey)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.ProjectKey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Offset != 0 {
		i = encodeVarintFcc(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Limit != 0 {
		i = encodeVarintFcc(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FetchGroupsRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchGroupsRet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchGroupsRet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFcc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Total != 0 {
		i = encodeVarintFcc(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Group) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Group) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Group) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdateTime != 0 {
		i = encodeVarintFcc(dAtA, i, uint64(m.UpdateTime))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.CreateTime != 0 {
		i = encodeVarintFcc(dAtA, i, uint64(m.CreateTime))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x98
	}
	if len(m.OpName) > 0 {
		i -= len(m.OpName)
		copy(dAtA[i:], m.OpName)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.OpName)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	if len(m.OpId) > 0 {
		i -= len(m.OpId)
		copy(dAtA[i:], m.OpId)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.OpId)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x8a
	}
	if m.Status != 0 {
		i = encodeVarintFcc(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.GroupName) > 0 {
		i -= len(m.GroupName)
		copy(dAtA[i:], m.GroupName)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.GroupName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GroupKey) > 0 {
		i -= len(m.GroupKey)
		copy(dAtA[i:], m.GroupKey)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.GroupKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProjectKey) > 0 {
		i -= len(m.ProjectKey)
		copy(dAtA[i:], m.ProjectKey)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.ProjectKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FetchGroupsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchGroupsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchGroupsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFcc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.BaseRet != nil {
		{
			size, err := m.BaseRet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFcc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FetchConfigsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchConfigsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchConfigsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Filter) > 0 {
		for k := range m.Filter {
			v := m.Filter[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintFcc(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintFcc(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintFcc(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.GroupKey) > 0 {
		i -= len(m.GroupKey)
		copy(dAtA[i:], m.GroupKey)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.GroupKey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ProjectKey) > 0 {
		i -= len(m.ProjectKey)
		copy(dAtA[i:], m.ProjectKey)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.ProjectKey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Offset != 0 {
		i = encodeVarintFcc(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Limit != 0 {
		i = encodeVarintFcc(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FetchConfigsRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchConfigsRet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchConfigsRet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFcc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Total != 0 {
		i = encodeVarintFcc(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdateTime != 0 {
		i = encodeVarintFcc(dAtA, i, uint64(m.UpdateTime))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.CreateTime != 0 {
		i = encodeVarintFcc(dAtA, i, uint64(m.CreateTime))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x98
	}
	if len(m.OpName) > 0 {
		i -= len(m.OpName)
		copy(dAtA[i:], m.OpName)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.OpName)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	if len(m.OpId) > 0 {
		i -= len(m.OpId)
		copy(dAtA[i:], m.OpId)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.OpId)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x8a
	}
	if m.PublishStatus != 0 {
		i = encodeVarintFcc(dAtA, i, uint64(m.PublishStatus))
		i--
		dAtA[i] = 0x40
	}
	if m.Status != 0 {
		i = encodeVarintFcc(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x38
	}
	if len(m.PreValue) > 0 {
		i -= len(m.PreValue)
		copy(dAtA[i:], m.PreValue)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.PreValue)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ConfKey) > 0 {
		i -= len(m.ConfKey)
		copy(dAtA[i:], m.ConfKey)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.ConfKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GroupKey) > 0 {
		i -= len(m.GroupKey)
		copy(dAtA[i:], m.GroupKey)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.GroupKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProjectKey) > 0 {
		i -= len(m.ProjectKey)
		copy(dAtA[i:], m.ProjectKey)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.ProjectKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FetchConfigsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchConfigsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchConfigsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFcc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.BaseRet != nil {
		{
			size, err := m.BaseRet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFcc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SaveProjectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveProjectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveProjectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SaveMode != 0 {
		i = encodeVarintFcc(dAtA, i, uint64(m.SaveMode))
		i--
		dAtA[i] = 0x10
	}
	if m.Project != nil {
		{
			size, err := m.Project.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFcc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SaveProjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveProjectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveProjectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseRet != nil {
		{
			size, err := m.BaseRet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFcc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SaveGroupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveGroupRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveGroupRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SaveMode != 0 {
		i = encodeVarintFcc(dAtA, i, uint64(m.SaveMode))
		i--
		dAtA[i] = 0x10
	}
	if m.Group != nil {
		{
			size, err := m.Group.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFcc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SaveGroupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveGroupResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveGroupResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseRet != nil {
		{
			size, err := m.BaseRet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFcc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SaveConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SaveMode != 0 {
		i = encodeVarintFcc(dAtA, i, uint64(m.SaveMode))
		i--
		dAtA[i] = 0x10
	}
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFcc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SaveConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseRet != nil {
		{
			size, err := m.BaseRet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFcc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrePublishRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrePublishRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrePublishRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OpName) > 0 {
		i -= len(m.OpName)
		copy(dAtA[i:], m.OpName)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.OpName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.OpId) > 0 {
		i -= len(m.OpId)
		copy(dAtA[i:], m.OpId)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.OpId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PreValue) > 0 {
		i -= len(m.PreValue)
		copy(dAtA[i:], m.PreValue)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.PreValue)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ConfKey) > 0 {
		i -= len(m.ConfKey)
		copy(dAtA[i:], m.ConfKey)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.ConfKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GroupKey) > 0 {
		i -= len(m.GroupKey)
		copy(dAtA[i:], m.GroupKey)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.GroupKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProjectKey) > 0 {
		i -= len(m.ProjectKey)
		copy(dAtA[i:], m.ProjectKey)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.ProjectKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrePublishResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrePublishResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrePublishResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseRet != nil {
		{
			size, err := m.BaseRet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFcc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PublishRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublishRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PublishRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OpName) > 0 {
		i -= len(m.OpName)
		copy(dAtA[i:], m.OpName)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.OpName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OpId) > 0 {
		i -= len(m.OpId)
		copy(dAtA[i:], m.OpId)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.OpId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ConfKey) > 0 {
		i -= len(m.ConfKey)
		copy(dAtA[i:], m.ConfKey)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.ConfKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GroupKey) > 0 {
		i -= len(m.GroupKey)
		copy(dAtA[i:], m.GroupKey)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.GroupKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProjectKey) > 0 {
		i -= len(m.ProjectKey)
		copy(dAtA[i:], m.ProjectKey)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.ProjectKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PublishResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublishResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PublishResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseRet != nil {
		{
			size, err := m.BaseRet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFcc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FetchConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConfKey) > 0 {
		i -= len(m.ConfKey)
		copy(dAtA[i:], m.ConfKey)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.ConfKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GroupKey) > 0 {
		i -= len(m.GroupKey)
		copy(dAtA[i:], m.GroupKey)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.GroupKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProjectKey) > 0 {
		i -= len(m.ProjectKey)
		copy(dAtA[i:], m.ProjectKey)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.ProjectKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FetchConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFcc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.BaseRet != nil {
		{
			size, err := m.BaseRet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFcc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFcc(dAtA []byte, offset int, v uint64) int {
	offset -= sovFcc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BaseRet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFcc(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	return n
}

func (m *FetchProjectsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovFcc(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovFcc(uint64(m.Offset))
	}
	if len(m.Filter) > 0 {
		for k, v := range m.Filter {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovFcc(uint64(len(k))) + 1 + len(v) + sovFcc(uint64(len(v)))
			n += mapEntrySize + 1 + sovFcc(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *FetchProjectsRet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovFcc(uint64(m.Total))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovFcc(uint64(l))
		}
	}
	return n
}

func (m *Project) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProjectKey)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	l = len(m.ProjectName)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovFcc(uint64(m.Status))
	}
	l = len(m.OpId)
	if l > 0 {
		n += 2 + l + sovFcc(uint64(l))
	}
	l = len(m.OpName)
	if l > 0 {
		n += 2 + l + sovFcc(uint64(l))
	}
	if m.CreateTime != 0 {
		n += 2 + sovFcc(uint64(m.CreateTime))
	}
	if m.UpdateTime != 0 {
		n += 2 + sovFcc(uint64(m.UpdateTime))
	}
	return n
}

func (m *FetchProjectsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseRet != nil {
		l = m.BaseRet.Size()
		n += 1 + l + sovFcc(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovFcc(uint64(l))
	}
	return n
}

func (m *FetchGroupsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovFcc(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovFcc(uint64(m.Offset))
	}
	l = len(m.ProjectKey)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	if len(m.Filter) > 0 {
		for k, v := range m.Filter {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovFcc(uint64(len(k))) + 1 + len(v) + sovFcc(uint64(len(v)))
			n += mapEntrySize + 1 + sovFcc(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *FetchGroupsRet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovFcc(uint64(m.Total))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovFcc(uint64(l))
		}
	}
	return n
}

func (m *Group) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProjectKey)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	l = len(m.GroupKey)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	l = len(m.GroupName)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovFcc(uint64(m.Status))
	}
	l = len(m.OpId)
	if l > 0 {
		n += 2 + l + sovFcc(uint64(l))
	}
	l = len(m.OpName)
	if l > 0 {
		n += 2 + l + sovFcc(uint64(l))
	}
	if m.CreateTime != 0 {
		n += 2 + sovFcc(uint64(m.CreateTime))
	}
	if m.UpdateTime != 0 {
		n += 2 + sovFcc(uint64(m.UpdateTime))
	}
	return n
}

func (m *FetchGroupsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseRet != nil {
		l = m.BaseRet.Size()
		n += 1 + l + sovFcc(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovFcc(uint64(l))
	}
	return n
}

func (m *FetchConfigsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovFcc(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovFcc(uint64(m.Offset))
	}
	l = len(m.ProjectKey)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	l = len(m.GroupKey)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	if len(m.Filter) > 0 {
		for k, v := range m.Filter {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovFcc(uint64(len(k))) + 1 + len(v) + sovFcc(uint64(len(v)))
			n += mapEntrySize + 1 + sovFcc(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *FetchConfigsRet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovFcc(uint64(m.Total))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovFcc(uint64(l))
		}
	}
	return n
}

func (m *Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProjectKey)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	l = len(m.GroupKey)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	l = len(m.ConfKey)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	l = len(m.PreValue)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovFcc(uint64(m.Status))
	}
	if m.PublishStatus != 0 {
		n += 1 + sovFcc(uint64(m.PublishStatus))
	}
	l = len(m.OpId)
	if l > 0 {
		n += 2 + l + sovFcc(uint64(l))
	}
	l = len(m.OpName)
	if l > 0 {
		n += 2 + l + sovFcc(uint64(l))
	}
	if m.CreateTime != 0 {
		n += 2 + sovFcc(uint64(m.CreateTime))
	}
	if m.UpdateTime != 0 {
		n += 2 + sovFcc(uint64(m.UpdateTime))
	}
	return n
}

func (m *FetchConfigsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseRet != nil {
		l = m.BaseRet.Size()
		n += 1 + l + sovFcc(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovFcc(uint64(l))
	}
	return n
}

func (m *SaveProjectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Project != nil {
		l = m.Project.Size()
		n += 1 + l + sovFcc(uint64(l))
	}
	if m.SaveMode != 0 {
		n += 1 + sovFcc(uint64(m.SaveMode))
	}
	return n
}

func (m *SaveProjectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseRet != nil {
		l = m.BaseRet.Size()
		n += 1 + l + sovFcc(uint64(l))
	}
	return n
}

func (m *SaveGroupRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Group != nil {
		l = m.Group.Size()
		n += 1 + l + sovFcc(uint64(l))
	}
	if m.SaveMode != 0 {
		n += 1 + sovFcc(uint64(m.SaveMode))
	}
	return n
}

func (m *SaveGroupResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseRet != nil {
		l = m.BaseRet.Size()
		n += 1 + l + sovFcc(uint64(l))
	}
	return n
}

func (m *SaveConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovFcc(uint64(l))
	}
	if m.SaveMode != 0 {
		n += 1 + sovFcc(uint64(m.SaveMode))
	}
	return n
}

func (m *SaveConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseRet != nil {
		l = m.BaseRet.Size()
		n += 1 + l + sovFcc(uint64(l))
	}
	return n
}

func (m *PrePublishRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProjectKey)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	l = len(m.GroupKey)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	l = len(m.ConfKey)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	l = len(m.PreValue)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	l = len(m.OpId)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	l = len(m.OpName)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	return n
}

func (m *PrePublishResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseRet != nil {
		l = m.BaseRet.Size()
		n += 1 + l + sovFcc(uint64(l))
	}
	return n
}

func (m *PublishRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProjectKey)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	l = len(m.GroupKey)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	l = len(m.ConfKey)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	l = len(m.OpId)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	l = len(m.OpName)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	return n
}

func (m *PublishResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseRet != nil {
		l = m.BaseRet.Size()
		n += 1 + l + sovFcc(uint64(l))
	}
	return n
}

func (m *FetchConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProjectKey)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	l = len(m.GroupKey)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	l = len(m.ConfKey)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	return n
}

func (m *FetchConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseRet != nil {
		l = m.BaseRet.Size()
		n += 1 + l + sovFcc(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovFcc(uint64(l))
	}
	return n
}

func sovFcc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFcc(x uint64) (n int) {
	return sovFcc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BaseRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseRet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseRet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchProjectsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchProjectsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchProjectsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFcc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFcc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFcc
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthFcc
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFcc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthFcc
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthFcc
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFcc(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthFcc
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Filter[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchProjectsRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchProjectsRet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchProjectsRet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Project{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Project) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Project: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Project: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 97:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 99:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			m.UpdateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchProjectsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchProjectsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchProjectsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseRet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseRet == nil {
				m.BaseRet = &BaseRet{}
			}
			if err := m.BaseRet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &FetchProjectsRet{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchGroupsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchGroupsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchGroupsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFcc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFcc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFcc
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthFcc
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFcc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthFcc
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthFcc
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFcc(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthFcc
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Filter[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchGroupsRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchGroupsRet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchGroupsRet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Group{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Group) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Group: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Group: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 97:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 99:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			m.UpdateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchGroupsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchGroupsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchGroupsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseRet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseRet == nil {
				m.BaseRet = &BaseRet{}
			}
			if err := m.BaseRet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &FetchGroupsRet{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchConfigsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchConfigsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchConfigsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFcc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFcc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFcc
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthFcc
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFcc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthFcc
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthFcc
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFcc(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthFcc
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Filter[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchConfigsRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchConfigsRet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchConfigsRet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Config{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublishStatus", wireType)
			}
			m.PublishStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PublishStatus |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 97:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 99:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			m.UpdateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchConfigsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchConfigsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchConfigsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseRet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseRet == nil {
				m.BaseRet = &BaseRet{}
			}
			if err := m.BaseRet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &FetchConfigsRet{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveProjectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveProjectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveProjectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Project", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Project == nil {
				m.Project = &Project{}
			}
			if err := m.Project.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaveMode", wireType)
			}
			m.SaveMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SaveMode |= SaveMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveProjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveProjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveProjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseRet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseRet == nil {
				m.BaseRet = &BaseRet{}
			}
			if err := m.BaseRet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveGroupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveGroupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveGroupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Group == nil {
				m.Group = &Group{}
			}
			if err := m.Group.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaveMode", wireType)
			}
			m.SaveMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SaveMode |= SaveMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveGroupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveGroupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveGroupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseRet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseRet == nil {
				m.BaseRet = &BaseRet{}
			}
			if err := m.BaseRet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &Config{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaveMode", wireType)
			}
			m.SaveMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SaveMode |= SaveMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseRet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseRet == nil {
				m.BaseRet = &BaseRet{}
			}
			if err := m.BaseRet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrePublishRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrePublishRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrePublishRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrePublishResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrePublishResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrePublishResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseRet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseRet == nil {
				m.BaseRet = &BaseRet{}
			}
			if err := m.BaseRet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublishRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublishResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseRet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseRet == nil {
				m.BaseRet = &BaseRet{}
			}
			if err := m.BaseRet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseRet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseRet == nil {
				m.BaseRet = &BaseRet{}
			}
			if err := m.BaseRet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &Config{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFcc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFcc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFcc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFcc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFcc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFcc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFcc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFcc = fmt.Errorf("proto: unexpected end of group")
)
