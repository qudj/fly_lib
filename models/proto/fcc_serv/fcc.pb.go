// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fcc.proto

package fcc_serv

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BaseRet struct {
	Code int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *BaseRet) Reset()         { *m = BaseRet{} }
func (m *BaseRet) String() string { return proto.CompactTextString(m) }
func (*BaseRet) ProtoMessage()    {}
func (*BaseRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_690ecd8b3e17edf8, []int{0}
}
func (m *BaseRet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseRet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseRet.Merge(m, src)
}
func (m *BaseRet) XXX_Size() int {
	return m.Size()
}
func (m *BaseRet) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseRet.DiscardUnknown(m)
}

var xxx_messageInfo_BaseRet proto.InternalMessageInfo

func (m *BaseRet) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *BaseRet) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// swagger:model
type FetchProjectsRequest struct {
	Limit       int64  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset      int64  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	ProjectKey  string `protobuf:"bytes,3,opt,name=project_key,json=projectKey,proto3" json:"project_key,omitempty"`
	ProjectName string `protobuf:"bytes,4,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
}

func (m *FetchProjectsRequest) Reset()         { *m = FetchProjectsRequest{} }
func (m *FetchProjectsRequest) String() string { return proto.CompactTextString(m) }
func (*FetchProjectsRequest) ProtoMessage()    {}
func (*FetchProjectsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_690ecd8b3e17edf8, []int{1}
}
func (m *FetchProjectsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchProjectsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchProjectsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchProjectsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchProjectsRequest.Merge(m, src)
}
func (m *FetchProjectsRequest) XXX_Size() int {
	return m.Size()
}
func (m *FetchProjectsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchProjectsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchProjectsRequest proto.InternalMessageInfo

func (m *FetchProjectsRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *FetchProjectsRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *FetchProjectsRequest) GetProjectKey() string {
	if m != nil {
		return m.ProjectKey
	}
	return ""
}

func (m *FetchProjectsRequest) GetProjectName() string {
	if m != nil {
		return m.ProjectName
	}
	return ""
}

type Project struct {
	ProjectKey  string `protobuf:"bytes,1,opt,name=project_key,json=projectKey,proto3" json:"project_key,omitempty"`
	ProjectName string `protobuf:"bytes,2,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Status      int64  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *Project) Reset()         { *m = Project{} }
func (m *Project) String() string { return proto.CompactTextString(m) }
func (*Project) ProtoMessage()    {}
func (*Project) Descriptor() ([]byte, []int) {
	return fileDescriptor_690ecd8b3e17edf8, []int{2}
}
func (m *Project) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Project) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Project.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Project) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Project.Merge(m, src)
}
func (m *Project) XXX_Size() int {
	return m.Size()
}
func (m *Project) XXX_DiscardUnknown() {
	xxx_messageInfo_Project.DiscardUnknown(m)
}

var xxx_messageInfo_Project proto.InternalMessageInfo

func (m *Project) GetProjectKey() string {
	if m != nil {
		return m.ProjectKey
	}
	return ""
}

func (m *Project) GetProjectName() string {
	if m != nil {
		return m.ProjectName
	}
	return ""
}

func (m *Project) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Project) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

// swagger:model
type FetchProjectsResponse struct {
	BaseRet *BaseRet   `protobuf:"bytes,1,opt,name=base_ret,json=baseRet,proto3" json:"base_ret,omitempty"`
	Data    []*Project `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (m *FetchProjectsResponse) Reset()         { *m = FetchProjectsResponse{} }
func (m *FetchProjectsResponse) String() string { return proto.CompactTextString(m) }
func (*FetchProjectsResponse) ProtoMessage()    {}
func (*FetchProjectsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_690ecd8b3e17edf8, []int{3}
}
func (m *FetchProjectsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchProjectsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchProjectsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchProjectsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchProjectsResponse.Merge(m, src)
}
func (m *FetchProjectsResponse) XXX_Size() int {
	return m.Size()
}
func (m *FetchProjectsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchProjectsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FetchProjectsResponse proto.InternalMessageInfo

func (m *FetchProjectsResponse) GetBaseRet() *BaseRet {
	if m != nil {
		return m.BaseRet
	}
	return nil
}

func (m *FetchProjectsResponse) GetData() []*Project {
	if m != nil {
		return m.Data
	}
	return nil
}

// swagger:model
type FetchGroupsRequest struct {
	Limit      int64  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset     int64  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	ProjectKey string `protobuf:"bytes,3,opt,name=project_key,json=projectKey,proto3" json:"project_key,omitempty"`
	GroupKey   string `protobuf:"bytes,4,opt,name=group_key,json=groupKey,proto3" json:"group_key,omitempty"`
	GroupName  string `protobuf:"bytes,5,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
}

func (m *FetchGroupsRequest) Reset()         { *m = FetchGroupsRequest{} }
func (m *FetchGroupsRequest) String() string { return proto.CompactTextString(m) }
func (*FetchGroupsRequest) ProtoMessage()    {}
func (*FetchGroupsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_690ecd8b3e17edf8, []int{4}
}
func (m *FetchGroupsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchGroupsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchGroupsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchGroupsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchGroupsRequest.Merge(m, src)
}
func (m *FetchGroupsRequest) XXX_Size() int {
	return m.Size()
}
func (m *FetchGroupsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchGroupsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchGroupsRequest proto.InternalMessageInfo

func (m *FetchGroupsRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *FetchGroupsRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *FetchGroupsRequest) GetProjectKey() string {
	if m != nil {
		return m.ProjectKey
	}
	return ""
}

func (m *FetchGroupsRequest) GetGroupKey() string {
	if m != nil {
		return m.GroupKey
	}
	return ""
}

func (m *FetchGroupsRequest) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

type Group struct {
	ProjectKey  string `protobuf:"bytes,1,opt,name=project_key,json=projectKey,proto3" json:"project_key,omitempty"`
	GroupKey    string `protobuf:"bytes,2,opt,name=group_key,json=groupKey,proto3" json:"group_key,omitempty"`
	GroupName   string `protobuf:"bytes,3,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Status      int64  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *Group) Reset()         { *m = Group{} }
func (m *Group) String() string { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()    {}
func (*Group) Descriptor() ([]byte, []int) {
	return fileDescriptor_690ecd8b3e17edf8, []int{5}
}
func (m *Group) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Group) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Group.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Group) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Group.Merge(m, src)
}
func (m *Group) XXX_Size() int {
	return m.Size()
}
func (m *Group) XXX_DiscardUnknown() {
	xxx_messageInfo_Group.DiscardUnknown(m)
}

var xxx_messageInfo_Group proto.InternalMessageInfo

func (m *Group) GetProjectKey() string {
	if m != nil {
		return m.ProjectKey
	}
	return ""
}

func (m *Group) GetGroupKey() string {
	if m != nil {
		return m.GroupKey
	}
	return ""
}

func (m *Group) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *Group) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Group) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

// swagger:model
type FetchGroupsResponse struct {
	BaseRet *BaseRet `protobuf:"bytes,1,opt,name=base_ret,json=baseRet,proto3" json:"base_ret,omitempty"`
	Data    []*Group `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (m *FetchGroupsResponse) Reset()         { *m = FetchGroupsResponse{} }
func (m *FetchGroupsResponse) String() string { return proto.CompactTextString(m) }
func (*FetchGroupsResponse) ProtoMessage()    {}
func (*FetchGroupsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_690ecd8b3e17edf8, []int{6}
}
func (m *FetchGroupsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchGroupsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchGroupsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchGroupsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchGroupsResponse.Merge(m, src)
}
func (m *FetchGroupsResponse) XXX_Size() int {
	return m.Size()
}
func (m *FetchGroupsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchGroupsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FetchGroupsResponse proto.InternalMessageInfo

func (m *FetchGroupsResponse) GetBaseRet() *BaseRet {
	if m != nil {
		return m.BaseRet
	}
	return nil
}

func (m *FetchGroupsResponse) GetData() []*Group {
	if m != nil {
		return m.Data
	}
	return nil
}

// swagger:model
type FetchConfigsRequest struct {
	Limit      int64  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset     int64  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	ProjectKey string `protobuf:"bytes,3,opt,name=project_key,json=projectKey,proto3" json:"project_key,omitempty"`
	GroupKey   string `protobuf:"bytes,4,opt,name=group_key,json=groupKey,proto3" json:"group_key,omitempty"`
	ConfKey    string `protobuf:"bytes,5,opt,name=conf_key,json=confKey,proto3" json:"conf_key,omitempty"`
}

func (m *FetchConfigsRequest) Reset()         { *m = FetchConfigsRequest{} }
func (m *FetchConfigsRequest) String() string { return proto.CompactTextString(m) }
func (*FetchConfigsRequest) ProtoMessage()    {}
func (*FetchConfigsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_690ecd8b3e17edf8, []int{7}
}
func (m *FetchConfigsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchConfigsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchConfigsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchConfigsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchConfigsRequest.Merge(m, src)
}
func (m *FetchConfigsRequest) XXX_Size() int {
	return m.Size()
}
func (m *FetchConfigsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchConfigsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchConfigsRequest proto.InternalMessageInfo

func (m *FetchConfigsRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *FetchConfigsRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *FetchConfigsRequest) GetProjectKey() string {
	if m != nil {
		return m.ProjectKey
	}
	return ""
}

func (m *FetchConfigsRequest) GetGroupKey() string {
	if m != nil {
		return m.GroupKey
	}
	return ""
}

func (m *FetchConfigsRequest) GetConfKey() string {
	if m != nil {
		return m.ConfKey
	}
	return ""
}

type Config struct {
	ProjectKey  string `protobuf:"bytes,1,opt,name=project_key,json=projectKey,proto3" json:"project_key,omitempty"`
	GroupKey    string `protobuf:"bytes,2,opt,name=group_key,json=groupKey,proto3" json:"group_key,omitempty"`
	ConfKey     string `protobuf:"bytes,3,opt,name=conf_key,json=confKey,proto3" json:"conf_key,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Value       string `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	PreValue    string `protobuf:"bytes,6,opt,name=pre_value,json=preValue,proto3" json:"pre_value,omitempty"`
	Status      int64  `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_690ecd8b3e17edf8, []int{8}
}
func (m *Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return m.Size()
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetProjectKey() string {
	if m != nil {
		return m.ProjectKey
	}
	return ""
}

func (m *Config) GetGroupKey() string {
	if m != nil {
		return m.GroupKey
	}
	return ""
}

func (m *Config) GetConfKey() string {
	if m != nil {
		return m.ConfKey
	}
	return ""
}

func (m *Config) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Config) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Config) GetPreValue() string {
	if m != nil {
		return m.PreValue
	}
	return ""
}

func (m *Config) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

// swagger:model
type FetchConfigsResponse struct {
	BaseRet *BaseRet  `protobuf:"bytes,1,opt,name=base_ret,json=baseRet,proto3" json:"base_ret,omitempty"`
	Data    []*Config `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (m *FetchConfigsResponse) Reset()         { *m = FetchConfigsResponse{} }
func (m *FetchConfigsResponse) String() string { return proto.CompactTextString(m) }
func (*FetchConfigsResponse) ProtoMessage()    {}
func (*FetchConfigsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_690ecd8b3e17edf8, []int{9}
}
func (m *FetchConfigsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchConfigsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchConfigsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchConfigsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchConfigsResponse.Merge(m, src)
}
func (m *FetchConfigsResponse) XXX_Size() int {
	return m.Size()
}
func (m *FetchConfigsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchConfigsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FetchConfigsResponse proto.InternalMessageInfo

func (m *FetchConfigsResponse) GetBaseRet() *BaseRet {
	if m != nil {
		return m.BaseRet
	}
	return nil
}

func (m *FetchConfigsResponse) GetData() []*Config {
	if m != nil {
		return m.Data
	}
	return nil
}

// swagger:model
type FetchMiniConfigRequest struct {
	ProjectKey string `protobuf:"bytes,1,opt,name=project_key,json=projectKey,proto3" json:"project_key,omitempty"`
	GroupKey   string `protobuf:"bytes,2,opt,name=group_key,json=groupKey,proto3" json:"group_key,omitempty"`
	ConfKey    string `protobuf:"bytes,3,opt,name=conf_key,json=confKey,proto3" json:"conf_key,omitempty"`
}

func (m *FetchMiniConfigRequest) Reset()         { *m = FetchMiniConfigRequest{} }
func (m *FetchMiniConfigRequest) String() string { return proto.CompactTextString(m) }
func (*FetchMiniConfigRequest) ProtoMessage()    {}
func (*FetchMiniConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_690ecd8b3e17edf8, []int{10}
}
func (m *FetchMiniConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchMiniConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchMiniConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchMiniConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchMiniConfigRequest.Merge(m, src)
}
func (m *FetchMiniConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *FetchMiniConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchMiniConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchMiniConfigRequest proto.InternalMessageInfo

func (m *FetchMiniConfigRequest) GetProjectKey() string {
	if m != nil {
		return m.ProjectKey
	}
	return ""
}

func (m *FetchMiniConfigRequest) GetGroupKey() string {
	if m != nil {
		return m.GroupKey
	}
	return ""
}

func (m *FetchMiniConfigRequest) GetConfKey() string {
	if m != nil {
		return m.ConfKey
	}
	return ""
}

type MiniConfig struct {
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *MiniConfig) Reset()         { *m = MiniConfig{} }
func (m *MiniConfig) String() string { return proto.CompactTextString(m) }
func (*MiniConfig) ProtoMessage()    {}
func (*MiniConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_690ecd8b3e17edf8, []int{11}
}
func (m *MiniConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MiniConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MiniConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MiniConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MiniConfig.Merge(m, src)
}
func (m *MiniConfig) XXX_Size() int {
	return m.Size()
}
func (m *MiniConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MiniConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MiniConfig proto.InternalMessageInfo

func (m *MiniConfig) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// swagger:model
type FetchMiniConfigResponse struct {
	BaseRet *BaseRet    `protobuf:"bytes,1,opt,name=base_ret,json=baseRet,proto3" json:"base_ret,omitempty"`
	Data    *MiniConfig `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *FetchMiniConfigResponse) Reset()         { *m = FetchMiniConfigResponse{} }
func (m *FetchMiniConfigResponse) String() string { return proto.CompactTextString(m) }
func (*FetchMiniConfigResponse) ProtoMessage()    {}
func (*FetchMiniConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_690ecd8b3e17edf8, []int{12}
}
func (m *FetchMiniConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchMiniConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchMiniConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchMiniConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchMiniConfigResponse.Merge(m, src)
}
func (m *FetchMiniConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *FetchMiniConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchMiniConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FetchMiniConfigResponse proto.InternalMessageInfo

func (m *FetchMiniConfigResponse) GetBaseRet() *BaseRet {
	if m != nil {
		return m.BaseRet
	}
	return nil
}

func (m *FetchMiniConfigResponse) GetData() *MiniConfig {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*BaseRet)(nil), "fcc.serv.BaseRet")
	proto.RegisterType((*FetchProjectsRequest)(nil), "fcc.serv.FetchProjectsRequest")
	proto.RegisterType((*Project)(nil), "fcc.serv.Project")
	proto.RegisterType((*FetchProjectsResponse)(nil), "fcc.serv.FetchProjectsResponse")
	proto.RegisterType((*FetchGroupsRequest)(nil), "fcc.serv.FetchGroupsRequest")
	proto.RegisterType((*Group)(nil), "fcc.serv.Group")
	proto.RegisterType((*FetchGroupsResponse)(nil), "fcc.serv.FetchGroupsResponse")
	proto.RegisterType((*FetchConfigsRequest)(nil), "fcc.serv.FetchConfigsRequest")
	proto.RegisterType((*Config)(nil), "fcc.serv.Config")
	proto.RegisterType((*FetchConfigsResponse)(nil), "fcc.serv.FetchConfigsResponse")
	proto.RegisterType((*FetchMiniConfigRequest)(nil), "fcc.serv.FetchMiniConfigRequest")
	proto.RegisterType((*MiniConfig)(nil), "fcc.serv.MiniConfig")
	proto.RegisterType((*FetchMiniConfigResponse)(nil), "fcc.serv.FetchMiniConfigResponse")
}

func init() { proto.RegisterFile("fcc.proto", fileDescriptor_690ecd8b3e17edf8) }

var fileDescriptor_690ecd8b3e17edf8 = []byte{
	// 622 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x55, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xcd, 0xc4, 0xf9, 0xeb, 0x4d, 0x3f, 0xb5, 0xdf, 0x10, 0x8a, 0x09, 0xd4, 0x4d, 0x0d, 0x48,
	0x5d, 0xa0, 0x20, 0x95, 0x37, 0x28, 0x52, 0x59, 0x94, 0x3f, 0x19, 0x09, 0xb1, 0x8b, 0x1c, 0xe7,
	0x26, 0x75, 0x49, 0x6c, 0xc7, 0xe3, 0x44, 0xca, 0x13, 0xc0, 0x92, 0x07, 0x40, 0xf0, 0x3a, 0xac,
	0x50, 0x97, 0xb0, 0x43, 0xc9, 0x8b, 0x20, 0xcf, 0x4c, 0x62, 0x8f, 0x43, 0x52, 0x14, 0x54, 0xb1,
	0x9b, 0x99, 0x73, 0xef, 0x39, 0x37, 0xe7, 0x4c, 0xc6, 0xb0, 0xd5, 0x75, 0x9c, 0x66, 0x10, 0xfa,
	0x91, 0x4f, 0x2b, 0xf1, 0x92, 0x61, 0x38, 0x36, 0x1f, 0x41, 0xf9, 0xc4, 0x66, 0x68, 0x61, 0x44,
	0x29, 0x14, 0x1c, 0xbf, 0x83, 0x3a, 0x69, 0x90, 0x23, 0xcd, 0xe2, 0x6b, 0xba, 0x0b, 0xda, 0x80,
	0xf5, 0xf4, 0x7c, 0x83, 0x1c, 0x6d, 0x59, 0xf1, 0xd2, 0xfc, 0x40, 0xa0, 0x76, 0x8a, 0x91, 0x73,
	0xfe, 0x2a, 0xf4, 0x2f, 0xd0, 0x89, 0x98, 0x85, 0xc3, 0x11, 0xb2, 0x88, 0xd6, 0xa0, 0xd8, 0x77,
	0x07, 0x6e, 0x24, 0xfb, 0xc5, 0x86, 0xee, 0x41, 0xc9, 0xef, 0x76, 0x19, 0x46, 0x9c, 0x43, 0xb3,
	0xe4, 0x8e, 0x1e, 0x40, 0x35, 0x10, 0x04, 0xad, 0x77, 0x38, 0xd1, 0x35, 0x2e, 0x00, 0xf2, 0xe8,
	0x0c, 0x27, 0xf4, 0x10, 0xb6, 0xe7, 0x05, 0x9e, 0x3d, 0x40, 0xbd, 0xc0, 0x2b, 0xe6, 0x4d, 0x2f,
	0xec, 0x01, 0x9a, 0xef, 0x09, 0x94, 0xe5, 0x14, 0x59, 0x3e, 0x72, 0x25, 0x5f, 0x7e, 0x89, 0x8f,
	0x36, 0xa0, 0xda, 0x41, 0xe6, 0x84, 0x6e, 0x10, 0xb9, 0xbe, 0x27, 0x67, 0x4a, 0x1f, 0xc5, 0xbf,
	0x86, 0x45, 0x76, 0x34, 0x62, 0x7c, 0x1c, 0xcd, 0x92, 0x3b, 0xb3, 0x0f, 0x37, 0x33, 0x9e, 0xb0,
	0xc0, 0xf7, 0x18, 0xd2, 0x87, 0x50, 0x69, 0xdb, 0x0c, 0x5b, 0x21, 0x0a, 0x5f, 0xaa, 0xc7, 0xff,
	0x37, 0xe7, 0xde, 0x37, 0xa5, 0xf1, 0x56, 0xb9, 0x2d, 0x13, 0x78, 0x00, 0x85, 0x8e, 0x1d, 0xd9,
	0x7a, 0xbe, 0xa1, 0xa9, 0x95, 0x92, 0xd7, 0xe2, 0xb0, 0xf9, 0x85, 0x00, 0xe5, 0x72, 0x4f, 0x43,
	0x7f, 0x14, 0x5c, 0x57, 0x00, 0x77, 0x60, 0xab, 0x17, 0xf3, 0x73, 0x58, 0xb8, 0x5f, 0xe1, 0x07,
	0x31, 0xb8, 0x0f, 0x20, 0x40, 0xee, 0x65, 0x91, 0xa3, 0xa2, 0x9c, 0x27, 0xf3, 0x99, 0x40, 0x91,
	0x0f, 0x77, 0x75, 0x2e, 0x8a, 0x4c, 0x7e, 0xad, 0x8c, 0x96, 0x91, 0xc9, 0x06, 0x56, 0x58, 0x17,
	0x58, 0x51, 0x09, 0xec, 0x1c, 0x6e, 0x28, 0x0e, 0x6e, 0x14, 0xd7, 0x3d, 0x25, 0xae, 0x9d, 0xa4,
	0x92, 0xb3, 0xca, 0xb0, 0x3e, 0x11, 0x29, 0xf5, 0xc4, 0xf7, 0xba, 0x6e, 0xef, 0x9f, 0xa4, 0x75,
	0x1b, 0x2a, 0x8e, 0xef, 0x75, 0x39, 0x26, 0xb2, 0x2a, 0xc7, 0xfb, 0x33, 0x9c, 0x98, 0xdf, 0x08,
	0x94, 0xc4, 0x64, 0x7f, 0x19, 0x55, 0x5a, 0x43, 0x53, 0x34, 0xfe, 0x20, 0xa6, 0x1a, 0x14, 0xc7,
	0x76, 0x7f, 0x34, 0xbf, 0x49, 0x62, 0x13, 0xeb, 0x05, 0x21, 0xb6, 0x04, 0x52, 0x12, 0x7a, 0x41,
	0x88, 0x6f, 0x38, 0x98, 0x24, 0x5b, 0x56, 0x92, 0xbd, 0x90, 0xcf, 0xd3, 0xc2, 0xee, 0x8d, 0xa2,
	0xbd, 0xaf, 0x44, 0xbb, 0x9b, 0x54, 0x0a, 0x5a, 0x99, 0xed, 0x10, 0xf6, 0xb8, 0xd6, 0x73, 0xd7,
	0x73, 0x25, 0x20, 0xd3, 0xbd, 0x2e, 0x2f, 0x4d, 0x13, 0x20, 0x51, 0x4b, 0x7c, 0x23, 0x29, 0xdf,
	0xcc, 0x21, 0xdc, 0x5a, 0x1a, 0x6b, 0x23, 0x17, 0x8e, 0x16, 0x2e, 0xc4, 0x95, 0xb5, 0xa4, 0x32,
	0xc5, 0xcc, 0x2b, 0x8e, 0x7f, 0xe4, 0x01, 0x4e, 0x1d, 0xe7, 0x35, 0x86, 0x63, 0xd7, 0x41, 0x6a,
	0xc1, 0x7f, 0xca, 0x7b, 0x48, 0x8d, 0xa4, 0xf7, 0x77, 0x1f, 0x8f, 0xfa, 0xc1, 0x4a, 0x5c, 0x0c,
	0x6e, 0xe6, 0xe8, 0x33, 0xa8, 0xa6, 0xfe, 0xb2, 0xf4, 0x6e, 0xa6, 0x43, 0x79, 0x0b, 0xeb, 0xfb,
	0x2b, 0xd0, 0x05, 0xdb, 0x4b, 0xd8, 0x4e, 0x5f, 0x13, 0x9a, 0x6d, 0x50, 0xff, 0xad, 0x75, 0x63,
	0x15, 0xbc, 0x20, 0x7c, 0x0b, 0x3b, 0x19, 0xd3, 0x69, 0x23, 0xd3, 0xb4, 0x74, 0x4d, 0xea, 0x87,
	0x6b, 0x2a, 0xe6, 0xcc, 0x27, 0xfa, 0xd7, 0xa9, 0x41, 0x2e, 0xa7, 0x06, 0xf9, 0x39, 0x35, 0xc8,
	0xc7, 0x99, 0x91, 0xbb, 0x9c, 0x19, 0xb9, 0xef, 0x33, 0x23, 0xd7, 0x2e, 0xf1, 0xaf, 0xf9, 0xe3,
	0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x84, 0xe8, 0xf6, 0x69, 0xda, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FccServiceClient is the client API for FccService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FccServiceClient interface {
	FetchProjects(ctx context.Context, in *FetchProjectsRequest, opts ...grpc.CallOption) (*FetchProjectsResponse, error)
	FetchGroups(ctx context.Context, in *FetchGroupsRequest, opts ...grpc.CallOption) (*FetchGroupsResponse, error)
	FetchConfigs(ctx context.Context, in *FetchConfigsRequest, opts ...grpc.CallOption) (*FetchConfigsResponse, error)
	FetchMiniConfig(ctx context.Context, in *FetchMiniConfigRequest, opts ...grpc.CallOption) (*FetchMiniConfigResponse, error)
}

type fccServiceClient struct {
	cc *grpc.ClientConn
}

func NewFccServiceClient(cc *grpc.ClientConn) FccServiceClient {
	return &fccServiceClient{cc}
}

func (c *fccServiceClient) FetchProjects(ctx context.Context, in *FetchProjectsRequest, opts ...grpc.CallOption) (*FetchProjectsResponse, error) {
	out := new(FetchProjectsResponse)
	err := c.cc.Invoke(ctx, "/fcc.serv.FccService/FetchProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fccServiceClient) FetchGroups(ctx context.Context, in *FetchGroupsRequest, opts ...grpc.CallOption) (*FetchGroupsResponse, error) {
	out := new(FetchGroupsResponse)
	err := c.cc.Invoke(ctx, "/fcc.serv.FccService/FetchGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fccServiceClient) FetchConfigs(ctx context.Context, in *FetchConfigsRequest, opts ...grpc.CallOption) (*FetchConfigsResponse, error) {
	out := new(FetchConfigsResponse)
	err := c.cc.Invoke(ctx, "/fcc.serv.FccService/FetchConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fccServiceClient) FetchMiniConfig(ctx context.Context, in *FetchMiniConfigRequest, opts ...grpc.CallOption) (*FetchMiniConfigResponse, error) {
	out := new(FetchMiniConfigResponse)
	err := c.cc.Invoke(ctx, "/fcc.serv.FccService/FetchMiniConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FccServiceServer is the server API for FccService service.
type FccServiceServer interface {
	FetchProjects(context.Context, *FetchProjectsRequest) (*FetchProjectsResponse, error)
	FetchGroups(context.Context, *FetchGroupsRequest) (*FetchGroupsResponse, error)
	FetchConfigs(context.Context, *FetchConfigsRequest) (*FetchConfigsResponse, error)
	FetchMiniConfig(context.Context, *FetchMiniConfigRequest) (*FetchMiniConfigResponse, error)
}

// UnimplementedFccServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFccServiceServer struct {
}

func (*UnimplementedFccServiceServer) FetchProjects(ctx context.Context, req *FetchProjectsRequest) (*FetchProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchProjects not implemented")
}
func (*UnimplementedFccServiceServer) FetchGroups(ctx context.Context, req *FetchGroupsRequest) (*FetchGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGroups not implemented")
}
func (*UnimplementedFccServiceServer) FetchConfigs(ctx context.Context, req *FetchConfigsRequest) (*FetchConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchConfigs not implemented")
}
func (*UnimplementedFccServiceServer) FetchMiniConfig(ctx context.Context, req *FetchMiniConfigRequest) (*FetchMiniConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchMiniConfig not implemented")
}

func RegisterFccServiceServer(s *grpc.Server, srv FccServiceServer) {
	s.RegisterService(&_FccService_serviceDesc, srv)
}

func _FccService_FetchProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FccServiceServer).FetchProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fcc.serv.FccService/FetchProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FccServiceServer).FetchProjects(ctx, req.(*FetchProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FccService_FetchGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FccServiceServer).FetchGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fcc.serv.FccService/FetchGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FccServiceServer).FetchGroups(ctx, req.(*FetchGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FccService_FetchConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FccServiceServer).FetchConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fcc.serv.FccService/FetchConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FccServiceServer).FetchConfigs(ctx, req.(*FetchConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FccService_FetchMiniConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchMiniConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FccServiceServer).FetchMiniConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fcc.serv.FccService/FetchMiniConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FccServiceServer).FetchMiniConfig(ctx, req.(*FetchMiniConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FccService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fcc.serv.FccService",
	HandlerType: (*FccServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchProjects",
			Handler:    _FccService_FetchProjects_Handler,
		},
		{
			MethodName: "FetchGroups",
			Handler:    _FccService_FetchGroups_Handler,
		},
		{
			MethodName: "FetchConfigs",
			Handler:    _FccService_FetchConfigs_Handler,
		},
		{
			MethodName: "FetchMiniConfig",
			Handler:    _FccService_FetchMiniConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fcc.proto",
}

func (m *BaseRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseRet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseRet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintFcc(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FetchProjectsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchProjectsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchProjectsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProjectName) > 0 {
		i -= len(m.ProjectName)
		copy(dAtA[i:], m.ProjectName)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.ProjectName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ProjectKey) > 0 {
		i -= len(m.ProjectKey)
		copy(dAtA[i:], m.ProjectKey)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.ProjectKey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Offset != 0 {
		i = encodeVarintFcc(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Limit != 0 {
		i = encodeVarintFcc(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Project) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Project) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Project) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintFcc(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProjectName) > 0 {
		i -= len(m.ProjectName)
		copy(dAtA[i:], m.ProjectName)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.ProjectName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProjectKey) > 0 {
		i -= len(m.ProjectKey)
		copy(dAtA[i:], m.ProjectKey)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.ProjectKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FetchProjectsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchProjectsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchProjectsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFcc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.BaseRet != nil {
		{
			size, err := m.BaseRet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFcc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FetchGroupsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchGroupsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchGroupsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GroupName) > 0 {
		i -= len(m.GroupName)
		copy(dAtA[i:], m.GroupName)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.GroupName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.GroupKey) > 0 {
		i -= len(m.GroupKey)
		copy(dAtA[i:], m.GroupKey)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.GroupKey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ProjectKey) > 0 {
		i -= len(m.ProjectKey)
		copy(dAtA[i:], m.ProjectKey)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.ProjectKey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Offset != 0 {
		i = encodeVarintFcc(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Limit != 0 {
		i = encodeVarintFcc(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Group) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Group) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Group) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintFcc(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.GroupName) > 0 {
		i -= len(m.GroupName)
		copy(dAtA[i:], m.GroupName)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.GroupName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GroupKey) > 0 {
		i -= len(m.GroupKey)
		copy(dAtA[i:], m.GroupKey)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.GroupKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProjectKey) > 0 {
		i -= len(m.ProjectKey)
		copy(dAtA[i:], m.ProjectKey)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.ProjectKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FetchGroupsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchGroupsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchGroupsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFcc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.BaseRet != nil {
		{
			size, err := m.BaseRet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFcc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FetchConfigsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchConfigsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchConfigsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConfKey) > 0 {
		i -= len(m.ConfKey)
		copy(dAtA[i:], m.ConfKey)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.ConfKey)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.GroupKey) > 0 {
		i -= len(m.GroupKey)
		copy(dAtA[i:], m.GroupKey)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.GroupKey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ProjectKey) > 0 {
		i -= len(m.ProjectKey)
		copy(dAtA[i:], m.ProjectKey)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.ProjectKey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Offset != 0 {
		i = encodeVarintFcc(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Limit != 0 {
		i = encodeVarintFcc(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintFcc(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x38
	}
	if len(m.PreValue) > 0 {
		i -= len(m.PreValue)
		copy(dAtA[i:], m.PreValue)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.PreValue)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ConfKey) > 0 {
		i -= len(m.ConfKey)
		copy(dAtA[i:], m.ConfKey)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.ConfKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GroupKey) > 0 {
		i -= len(m.GroupKey)
		copy(dAtA[i:], m.GroupKey)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.GroupKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProjectKey) > 0 {
		i -= len(m.ProjectKey)
		copy(dAtA[i:], m.ProjectKey)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.ProjectKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FetchConfigsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchConfigsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchConfigsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFcc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.BaseRet != nil {
		{
			size, err := m.BaseRet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFcc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FetchMiniConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchMiniConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchMiniConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConfKey) > 0 {
		i -= len(m.ConfKey)
		copy(dAtA[i:], m.ConfKey)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.ConfKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GroupKey) > 0 {
		i -= len(m.GroupKey)
		copy(dAtA[i:], m.GroupKey)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.GroupKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProjectKey) > 0 {
		i -= len(m.ProjectKey)
		copy(dAtA[i:], m.ProjectKey)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.ProjectKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MiniConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MiniConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MiniConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintFcc(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FetchMiniConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchMiniConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchMiniConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFcc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.BaseRet != nil {
		{
			size, err := m.BaseRet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFcc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFcc(dAtA []byte, offset int, v uint64) int {
	offset -= sovFcc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BaseRet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFcc(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	return n
}

func (m *FetchProjectsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovFcc(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovFcc(uint64(m.Offset))
	}
	l = len(m.ProjectKey)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	l = len(m.ProjectName)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	return n
}

func (m *Project) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProjectKey)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	l = len(m.ProjectName)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovFcc(uint64(m.Status))
	}
	return n
}

func (m *FetchProjectsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseRet != nil {
		l = m.BaseRet.Size()
		n += 1 + l + sovFcc(uint64(l))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovFcc(uint64(l))
		}
	}
	return n
}

func (m *FetchGroupsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovFcc(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovFcc(uint64(m.Offset))
	}
	l = len(m.ProjectKey)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	l = len(m.GroupKey)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	l = len(m.GroupName)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	return n
}

func (m *Group) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProjectKey)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	l = len(m.GroupKey)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	l = len(m.GroupName)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovFcc(uint64(m.Status))
	}
	return n
}

func (m *FetchGroupsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseRet != nil {
		l = m.BaseRet.Size()
		n += 1 + l + sovFcc(uint64(l))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovFcc(uint64(l))
		}
	}
	return n
}

func (m *FetchConfigsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovFcc(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovFcc(uint64(m.Offset))
	}
	l = len(m.ProjectKey)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	l = len(m.GroupKey)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	l = len(m.ConfKey)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	return n
}

func (m *Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProjectKey)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	l = len(m.GroupKey)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	l = len(m.ConfKey)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	l = len(m.PreValue)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovFcc(uint64(m.Status))
	}
	return n
}

func (m *FetchConfigsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseRet != nil {
		l = m.BaseRet.Size()
		n += 1 + l + sovFcc(uint64(l))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovFcc(uint64(l))
		}
	}
	return n
}

func (m *FetchMiniConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProjectKey)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	l = len(m.GroupKey)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	l = len(m.ConfKey)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	return n
}

func (m *MiniConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovFcc(uint64(l))
	}
	return n
}

func (m *FetchMiniConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseRet != nil {
		l = m.BaseRet.Size()
		n += 1 + l + sovFcc(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovFcc(uint64(l))
	}
	return n
}

func sovFcc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFcc(x uint64) (n int) {
	return sovFcc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BaseRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseRet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseRet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchProjectsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchProjectsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchProjectsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Project) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Project: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Project: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchProjectsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchProjectsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchProjectsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseRet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseRet == nil {
				m.BaseRet = &BaseRet{}
			}
			if err := m.BaseRet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &Project{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchGroupsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchGroupsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchGroupsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Group) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Group: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Group: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchGroupsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchGroupsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchGroupsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseRet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseRet == nil {
				m.BaseRet = &BaseRet{}
			}
			if err := m.BaseRet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &Group{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchConfigsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchConfigsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchConfigsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchConfigsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchConfigsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchConfigsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseRet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseRet == nil {
				m.BaseRet = &BaseRet{}
			}
			if err := m.BaseRet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &Config{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchMiniConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchMiniConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchMiniConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MiniConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MiniConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MiniConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchMiniConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchMiniConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchMiniConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseRet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseRet == nil {
				m.BaseRet = &BaseRet{}
			}
			if err := m.BaseRet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFcc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &MiniConfig{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFcc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFcc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFcc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFcc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFcc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFcc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFcc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFcc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFcc = fmt.Errorf("proto: unexpected end of group")
)
